
SE_P7LCDNaves.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005998  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062ec  080062ec  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  080062ec  080062ec  000072ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f4  080062f4  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f4  080062f4  000072f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f8  080062f8  000072f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080062fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008024  2**0
                  CONTENTS
 10 .bss          000259a8  20000024  20000024  00008024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200259cc  200259cc  00008024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f46e  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f78  00000000  00000000  000174c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00019440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5e  00000000  00000000  0001a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fa0  00000000  00000000  0001b056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121e6  00000000  00000000  0003eff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc94a  00000000  00000000  000511dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012db26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043ac  00000000  00000000  0012db6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00131f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005b2c 	.word	0x08005b2c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08005b2c 	.word	0x08005b2c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <LCD_ILI9341_Init>:



//************************************************ FUNCIONES *************************************************
void LCD_ILI9341_Init(SPI_HandleTypeDef* lcd_hspi)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	ILI9341_CS_SET;
 80004e4:	2201      	movs	r2, #1
 80004e6:	2104      	movs	r1, #4
 80004e8:	48a9      	ldr	r0, [pc, #676]	@ (8000790 <LCD_ILI9341_Init+0x2b4>)
 80004ea:	f002 fe6f 	bl	80031cc <HAL_GPIO_WritePin>
	lcd_spi = *lcd_hspi;
 80004ee:	4aa9      	ldr	r2, [pc, #676]	@ (8000794 <LCD_ILI9341_Init+0x2b8>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4610      	mov	r0, r2
 80004f4:	4619      	mov	r1, r3
 80004f6:	2358      	movs	r3, #88	@ 0x58
 80004f8:	461a      	mov	r2, r3
 80004fa:	f005 fb09 	bl	8005b10 <memcpy>

	ILI9341_RST_SET;
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000504:	48a4      	ldr	r0, [pc, #656]	@ (8000798 <LCD_ILI9341_Init+0x2bc>)
 8000506:	f002 fe61 	bl	80031cc <HAL_GPIO_WritePin>
	LCD_ILI9341_SendCommand(ILI9341_RESET);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 f962 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_Delay(200000);
 8000510:	48a2      	ldr	r0, [pc, #648]	@ (800079c <LCD_ILI9341_Init+0x2c0>)
 8000512:	f000 f94d 	bl	80007b0 <LCD_ILI9341_Delay>
	LCD_ILI9341_SendCommand(ILI9341_POWERA);
 8000516:	20cb      	movs	r0, #203	@ 0xcb
 8000518:	f000 f95c 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x39);
 800051c:	2039      	movs	r0, #57	@ 0x39
 800051e:	f000 f97b 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x2C);
 8000522:	202c      	movs	r0, #44	@ 0x2c
 8000524:	f000 f978 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 f975 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x34);
 800052e:	2034      	movs	r0, #52	@ 0x34
 8000530:	f000 f972 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x02);
 8000534:	2002      	movs	r0, #2
 8000536:	f000 f96f 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_POWERB);
 800053a:	20cf      	movs	r0, #207	@ 0xcf
 800053c:	f000 f94a 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x00);
 8000540:	2000      	movs	r0, #0
 8000542:	f000 f969 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0xC1);
 8000546:	20c1      	movs	r0, #193	@ 0xc1
 8000548:	f000 f966 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x30);
 800054c:	2030      	movs	r0, #48	@ 0x30
 800054e:	f000 f963 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_DTCA);
 8000552:	20e8      	movs	r0, #232	@ 0xe8
 8000554:	f000 f93e 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x85);
 8000558:	2085      	movs	r0, #133	@ 0x85
 800055a:	f000 f95d 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 f95a 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x78);
 8000564:	2078      	movs	r0, #120	@ 0x78
 8000566:	f000 f957 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_DTCB);
 800056a:	20ea      	movs	r0, #234	@ 0xea
 800056c:	f000 f932 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x00);
 8000570:	2000      	movs	r0, #0
 8000572:	f000 f951 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f94e 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 800057c:	20ed      	movs	r0, #237	@ 0xed
 800057e:	f000 f929 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x64);
 8000582:	2064      	movs	r0, #100	@ 0x64
 8000584:	f000 f948 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x03);
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f945 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x12);
 800058e:	2012      	movs	r0, #18
 8000590:	f000 f942 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x81);
 8000594:	2081      	movs	r0, #129	@ 0x81
 8000596:	f000 f93f 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_PRC);
 800059a:	20f7      	movs	r0, #247	@ 0xf7
 800059c:	f000 f91a 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x20);
 80005a0:	2020      	movs	r0, #32
 80005a2:	f000 f939 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_POWER1);
 80005a6:	20c0      	movs	r0, #192	@ 0xc0
 80005a8:	f000 f914 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x23);
 80005ac:	2023      	movs	r0, #35	@ 0x23
 80005ae:	f000 f933 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_POWER2);
 80005b2:	20c1      	movs	r0, #193	@ 0xc1
 80005b4:	f000 f90e 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x10);
 80005b8:	2010      	movs	r0, #16
 80005ba:	f000 f92d 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_VCOM1);
 80005be:	20c5      	movs	r0, #197	@ 0xc5
 80005c0:	f000 f908 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x3E);
 80005c4:	203e      	movs	r0, #62	@ 0x3e
 80005c6:	f000 f927 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x28);
 80005ca:	2028      	movs	r0, #40	@ 0x28
 80005cc:	f000 f924 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_VCOM2);
 80005d0:	20c7      	movs	r0, #199	@ 0xc7
 80005d2:	f000 f8ff 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x86);
 80005d6:	2086      	movs	r0, #134	@ 0x86
 80005d8:	f000 f91e 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_MAC);
 80005dc:	2036      	movs	r0, #54	@ 0x36
 80005de:	f000 f8f9 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x48); //LCD_ILI9341_SendData(0x48);
 80005e2:	2048      	movs	r0, #72	@ 0x48
 80005e4:	f000 f918 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 80005e8:	203a      	movs	r0, #58	@ 0x3a
 80005ea:	f000 f8f3 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x55);
 80005ee:	2055      	movs	r0, #85	@ 0x55
 80005f0:	f000 f912 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_FRC);
 80005f4:	20b1      	movs	r0, #177	@ 0xb1
 80005f6:	f000 f8ed 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f90c 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x18);
 8000600:	2018      	movs	r0, #24
 8000602:	f000 f909 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_DFC);
 8000606:	20b6      	movs	r0, #182	@ 0xb6
 8000608:	f000 f8e4 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x08);
 800060c:	2008      	movs	r0, #8
 800060e:	f000 f903 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x82);
 8000612:	2082      	movs	r0, #130	@ 0x82
 8000614:	f000 f900 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x27);
 8000618:	2027      	movs	r0, #39	@ 0x27
 800061a:	f000 f8fd 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 800061e:	20f2      	movs	r0, #242	@ 0xf2
 8000620:	f000 f8d8 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f8f7 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800062a:	202a      	movs	r0, #42	@ 0x2a
 800062c:	f000 f8d2 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x00);
 8000630:	2000      	movs	r0, #0
 8000632:	f000 f8f1 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f8ee 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 f8eb 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0xEF);
 8000642:	20ef      	movs	r0, #239	@ 0xef
 8000644:	f000 f8e8 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8000648:	202b      	movs	r0, #43	@ 0x2b
 800064a:	f000 f8c3 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f8e2 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f8df 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x01);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 f8dc 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x3F);
 8000660:	203f      	movs	r0, #63	@ 0x3f
 8000662:	f000 f8d9 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_GAMMA);
 8000666:	2026      	movs	r0, #38	@ 0x26
 8000668:	f000 f8b4 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x01);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 f8d3 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_PGAMMA);
 8000672:	20e0      	movs	r0, #224	@ 0xe0
 8000674:	f000 f8ae 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x0F);
 8000678:	200f      	movs	r0, #15
 800067a:	f000 f8cd 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x31);
 800067e:	2031      	movs	r0, #49	@ 0x31
 8000680:	f000 f8ca 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x2B);
 8000684:	202b      	movs	r0, #43	@ 0x2b
 8000686:	f000 f8c7 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x0C);
 800068a:	200c      	movs	r0, #12
 800068c:	f000 f8c4 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x0E);
 8000690:	200e      	movs	r0, #14
 8000692:	f000 f8c1 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x08);
 8000696:	2008      	movs	r0, #8
 8000698:	f000 f8be 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x4E);
 800069c:	204e      	movs	r0, #78	@ 0x4e
 800069e:	f000 f8bb 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0xF1);
 80006a2:	20f1      	movs	r0, #241	@ 0xf1
 80006a4:	f000 f8b8 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x37);
 80006a8:	2037      	movs	r0, #55	@ 0x37
 80006aa:	f000 f8b5 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x07);
 80006ae:	2007      	movs	r0, #7
 80006b0:	f000 f8b2 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x10);
 80006b4:	2010      	movs	r0, #16
 80006b6:	f000 f8af 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x03);
 80006ba:	2003      	movs	r0, #3
 80006bc:	f000 f8ac 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x0E);
 80006c0:	200e      	movs	r0, #14
 80006c2:	f000 f8a9 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x09);
 80006c6:	2009      	movs	r0, #9
 80006c8:	f000 f8a6 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f8a3 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendCommand(ILI9341_NGAMMA);
 80006d2:	20e1      	movs	r0, #225	@ 0xe1
 80006d4:	f000 f87e 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f89d 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x0E);
 80006de:	200e      	movs	r0, #14
 80006e0:	f000 f89a 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x14);
 80006e4:	2014      	movs	r0, #20
 80006e6:	f000 f897 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x03);
 80006ea:	2003      	movs	r0, #3
 80006ec:	f000 f894 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x11);
 80006f0:	2011      	movs	r0, #17
 80006f2:	f000 f891 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x07);
 80006f6:	2007      	movs	r0, #7
 80006f8:	f000 f88e 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x31);
 80006fc:	2031      	movs	r0, #49	@ 0x31
 80006fe:	f000 f88b 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0xC1);
 8000702:	20c1      	movs	r0, #193	@ 0xc1
 8000704:	f000 f888 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x48);
 8000708:	2048      	movs	r0, #72	@ 0x48
 800070a:	f000 f885 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x08);
 800070e:	2008      	movs	r0, #8
 8000710:	f000 f882 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x0F);
 8000714:	200f      	movs	r0, #15
 8000716:	f000 f87f 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x0C);
 800071a:	200c      	movs	r0, #12
 800071c:	f000 f87c 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x31);
 8000720:	2031      	movs	r0, #49	@ 0x31
 8000722:	f000 f879 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x36);
 8000726:	2036      	movs	r0, #54	@ 0x36
 8000728:	f000 f876 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x0F);
 800072c:	200f      	movs	r0, #15
 800072e:	f000 f873 	bl	8000818 <LCD_ILI9341_SendData>

	LCD_ILI9341_SendCommand(ILI9341_INTERFACE);
 8000732:	20f6      	movs	r0, #246	@ 0xf6
 8000734:	f000 f84e 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(0x00);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f86d 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 800073e:	2000      	movs	r0, #0
 8000740:	f000 f86a 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(0x00);
 8000744:	2000      	movs	r0, #0
 8000746:	f000 f867 	bl	8000818 <LCD_ILI9341_SendData>

	LCD_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 800074a:	2011      	movs	r0, #17
 800074c:	f000 f842 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_Delay(1000000);
 8000750:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <LCD_ILI9341_Init+0x2c4>)
 8000752:	f000 f82d 	bl	80007b0 <LCD_ILI9341_Delay>
	LCD_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8000756:	2029      	movs	r0, #41	@ 0x29
 8000758:	f000 f83c 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendCommand(ILI9341_GRAM);
 800075c:	202c      	movs	r0, #44	@ 0x2c
 800075e:	f000 f839 	bl	80007d4 <LCD_ILI9341_SendCommand>

	ILI9341_x = ILI9341_y = 0;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <LCD_ILI9341_Init+0x2c8>)
 8000764:	2200      	movs	r2, #0
 8000766:	801a      	strh	r2, [r3, #0]
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <LCD_ILI9341_Init+0x2c8>)
 800076a:	881a      	ldrh	r2, [r3, #0]
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <LCD_ILI9341_Init+0x2cc>)
 800076e:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <LCD_ILI9341_Init+0x2d0>)
 8000772:	22f0      	movs	r2, #240	@ 0xf0
 8000774:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <LCD_ILI9341_Init+0x2d0>)
 8000778:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800077c:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = LCD_ILI9341_Portrait;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <LCD_ILI9341_Init+0x2d0>)
 8000780:	2201      	movs	r2, #1
 8000782:	711a      	strb	r2, [r3, #4]

	LCD_SPI_BaudRateUp(); //45Mbits/seg
 8000784:	f000 fc6e 	bl	8001064 <LCD_SPI_BaudRateUp>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020800 	.word	0x40020800
 8000794:	20000140 	.word	0x20000140
 8000798:	40020c00 	.word	0x40020c00
 800079c:	00030d40 	.word	0x00030d40
 80007a0:	000f4240 	.word	0x000f4240
 80007a4:	2000019a 	.word	0x2000019a
 80007a8:	20000198 	.word	0x20000198
 80007ac:	2000019c 	.word	0x2000019c

080007b0 <LCD_ILI9341_Delay>:

//Igual en ambas
void LCD_ILI9341_Delay(volatile unsigned int delay) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--);
 80007b8:	e002      	b.n	80007c0 <LCD_ILI9341_Delay+0x10>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3b01      	subs	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f9      	bne.n	80007ba <LCD_ILI9341_Delay+0xa>
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <LCD_ILI9341_SendCommand>:

//En otra, pero con la diferencia abajo
void LCD_ILI9341_SendCommand(uint8_t data) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e4:	480a      	ldr	r0, [pc, #40]	@ (8000810 <LCD_ILI9341_SendCommand+0x3c>)
 80007e6:	f002 fcf1 	bl	80031cc <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 80007ea:	2200      	movs	r2, #0
 80007ec:	2104      	movs	r1, #4
 80007ee:	4809      	ldr	r0, [pc, #36]	@ (8000814 <LCD_ILI9341_SendCommand+0x40>)
 80007f0:	f002 fcec 	bl	80031cc <HAL_GPIO_WritePin>
	LCD_SPI_Send(&data, 1);	//En otra: TM_SPI_Send(ILI9341_SPI, data);
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f8bf 	bl	800097c <LCD_SPI_Send>
	ILI9341_CS_SET;
 80007fe:	2201      	movs	r2, #1
 8000800:	2104      	movs	r1, #4
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <LCD_ILI9341_SendCommand+0x40>)
 8000804:	f002 fce2 	bl	80031cc <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020c00 	.word	0x40020c00
 8000814:	40020800 	.word	0x40020800

08000818 <LCD_ILI9341_SendData>:

//En otra, pero con la diferencia abajo
void LCD_ILI9341_SendData(uint8_t data) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000828:	480a      	ldr	r0, [pc, #40]	@ (8000854 <LCD_ILI9341_SendData+0x3c>)
 800082a:	f002 fccf 	bl	80031cc <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 800082e:	2200      	movs	r2, #0
 8000830:	2104      	movs	r1, #4
 8000832:	4809      	ldr	r0, [pc, #36]	@ (8000858 <LCD_ILI9341_SendData+0x40>)
 8000834:	f002 fcca 	bl	80031cc <HAL_GPIO_WritePin>
	LCD_SPI_Send(&data, 1);  //En otra: TM_SPI_Send(ILI9341_SPI, data);
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f89d 	bl	800097c <LCD_SPI_Send>
	ILI9341_CS_SET;
 8000842:	2201      	movs	r2, #1
 8000844:	2104      	movs	r1, #4
 8000846:	4804      	ldr	r0, [pc, #16]	@ (8000858 <LCD_ILI9341_SendData+0x40>)
 8000848:	f002 fcc0 	bl	80031cc <HAL_GPIO_WritePin>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020c00 	.word	0x40020c00
 8000858:	40020800 	.word	0x40020800

0800085c <LCD_ILI9341_SetCursorPosition>:
	LCD_ILI9341_SendData(color >> 8);
	LCD_ILI9341_SendData(color & 0xFF);
}

//En ambas igual
void LCD_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4604      	mov	r4, r0
 8000864:	4608      	mov	r0, r1
 8000866:	4611      	mov	r1, r2
 8000868:	461a      	mov	r2, r3
 800086a:	4623      	mov	r3, r4
 800086c:	80fb      	strh	r3, [r7, #6]
 800086e:	4603      	mov	r3, r0
 8000870:	80bb      	strh	r3, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	807b      	strh	r3, [r7, #2]
 8000876:	4613      	mov	r3, r2
 8000878:	803b      	strh	r3, [r7, #0]
	LCD_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800087a:	202a      	movs	r0, #42	@ 0x2a
 800087c:	f7ff ffaa 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(x1 >> 8);
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ffc5 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(x1 & 0xFF);
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffc0 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(x2 >> 8);
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffb9 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(x2 & 0xFF);
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffb4 	bl	8000818 <LCD_ILI9341_SendData>

	LCD_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 80008b0:	202b      	movs	r0, #43	@ 0x2b
 80008b2:	f7ff ff8f 	bl	80007d4 <LCD_ILI9341_SendCommand>
	LCD_ILI9341_SendData(y1 >> 8);
 80008b6:	88bb      	ldrh	r3, [r7, #4]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffaa 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(y1 & 0xFF);
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ffa5 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(y2 >> 8);
 80008ce:	883b      	ldrh	r3, [r7, #0]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff9e 	bl	8000818 <LCD_ILI9341_SendData>
	LCD_ILI9341_SendData(y2 & 0xFF);
 80008dc:	883b      	ldrh	r3, [r7, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff99 	bl	8000818 <LCD_ILI9341_SendData>
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd90      	pop	{r4, r7, pc}
	...

080008f0 <LCD_ILI9341_Rotate>:
	//ILI9341_CS_SET;
	//TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_8b);	// Go back to 8-bit SPI mode
}

//Igual en ambas
void LCD_ILI9341_Rotate(LCD_ILI9341_Orientation_t orientation) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	LCD_ILI9341_SendCommand(ILI9341_MAC);
 80008fa:	2036      	movs	r0, #54	@ 0x36
 80008fc:	f7ff ff6a 	bl	80007d4 <LCD_ILI9341_SendCommand>
	if (orientation == LCD_ILI9341_Orientation_Portrait_1) {
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d103      	bne.n	800090e <LCD_ILI9341_Rotate+0x1e>
		LCD_ILI9341_SendData(0x58); //LCD_ILI9341_SendData(0x58); 0101
 8000906:	2058      	movs	r0, #88	@ 0x58
 8000908:	f7ff ff86 	bl	8000818 <LCD_ILI9341_SendData>
 800090c:	e013      	b.n	8000936 <LCD_ILI9341_Rotate+0x46>
	} else if (orientation == LCD_ILI9341_Orientation_Portrait_2) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d103      	bne.n	800091c <LCD_ILI9341_Rotate+0x2c>
		LCD_ILI9341_SendData(0x88);//LCD_ILI9341_SendData(0x88);  1000
 8000914:	2088      	movs	r0, #136	@ 0x88
 8000916:	f7ff ff7f 	bl	8000818 <LCD_ILI9341_SendData>
 800091a:	e00c      	b.n	8000936 <LCD_ILI9341_Rotate+0x46>
	} else if (orientation == LCD_ILI9341_Orientation_Landscape_1) {
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d103      	bne.n	800092a <LCD_ILI9341_Rotate+0x3a>
		LCD_ILI9341_SendData(0x28);//LCD_ILI9341_SendData(0x28);  0010
 8000922:	2028      	movs	r0, #40	@ 0x28
 8000924:	f7ff ff78 	bl	8000818 <LCD_ILI9341_SendData>
 8000928:	e005      	b.n	8000936 <LCD_ILI9341_Rotate+0x46>
	} else if (orientation == LCD_ILI9341_Orientation_Landscape_2) {
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d102      	bne.n	8000936 <LCD_ILI9341_Rotate+0x46>
		LCD_ILI9341_SendData(0xE8);//LCD_ILI9341_SendData(0xE8);  1110
 8000930:	20e8      	movs	r0, #232	@ 0xe8
 8000932:	f7ff ff71 	bl	8000818 <LCD_ILI9341_SendData>
	}

	if (orientation == LCD_ILI9341_Orientation_Portrait_1 || orientation == LCD_ILI9341_Orientation_Portrait_2) {
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <LCD_ILI9341_Rotate+0x52>
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10a      	bne.n	8000958 <LCD_ILI9341_Rotate+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <LCD_ILI9341_Rotate+0x88>)
 8000944:	22f0      	movs	r2, #240	@ 0xf0
 8000946:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <LCD_ILI9341_Rotate+0x88>)
 800094a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800094e:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = LCD_ILI9341_Portrait;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <LCD_ILI9341_Rotate+0x88>)
 8000952:	2201      	movs	r2, #1
 8000954:	711a      	strb	r2, [r3, #4]
 8000956:	e00a      	b.n	800096e <LCD_ILI9341_Rotate+0x7e>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <LCD_ILI9341_Rotate+0x88>)
 800095a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800095e:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <LCD_ILI9341_Rotate+0x88>)
 8000962:	22f0      	movs	r2, #240	@ 0xf0
 8000964:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = LCD_ILI9341_Landscape;
 8000966:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <LCD_ILI9341_Rotate+0x88>)
 8000968:	2200      	movs	r2, #0
 800096a:	711a      	strb	r2, [r3, #4]
	}
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000019c 	.word	0x2000019c

0800097c <LCD_SPI_Send>:




//------------------------------------- SOLO AQUI -----------------------------------------------
void LCD_SPI_Send(uint8_t* data, uint16_t size) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
	switch(HAL_SPI_Transmit(&lcd_spi, data, size, 5000))
 8000988:	887a      	ldrh	r2, [r7, #2]
 800098a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <LCD_SPI_Send+0x44>)
 8000992:	f004 fa08 	bl	8004da6 <HAL_SPI_Transmit>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d006      	beq.n	80009aa <LCD_SPI_Send+0x2e>
 800099c:	2b03      	cmp	r3, #3
 800099e:	dc06      	bgt.n	80009ae <LCD_SPI_Send+0x32>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <LCD_SPI_Send+0x36>
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d006      	beq.n	80009b6 <LCD_SPI_Send+0x3a>
    /* Call Error Handler */
    //Error_Handler();
    break;

  default:
    break;
 80009a8:	e001      	b.n	80009ae <LCD_SPI_Send+0x32>
    break;
 80009aa:	bf00      	nop
 80009ac:	e004      	b.n	80009b8 <LCD_SPI_Send+0x3c>
    break;
 80009ae:	bf00      	nop
 80009b0:	e002      	b.n	80009b8 <LCD_SPI_Send+0x3c>
    break;
 80009b2:	bf00      	nop
 80009b4:	e000      	b.n	80009b8 <LCD_SPI_Send+0x3c>
    break;
 80009b6:	bf00      	nop
  }
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000140 	.word	0x20000140

080009c4 <LCD_ILI9341_DisplayImage>:


//CORREGIDA ---------------------------------------------------------------------
HAL_StatusTypeDef LCD_ILI9341_DisplayImage(uint32_t image[ILI9341_PIXEL])
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	LCD_ILI9341_SetCursorPosition(0, 0, ILI9341_Opts.width - 1, ILI9341_Opts.height - 1);		//OK
 80009cc:	4b77      	ldr	r3, [pc, #476]	@ (8000bac <LCD_ILI9341_DisplayImage+0x1e8>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b75      	ldr	r3, [pc, #468]	@ (8000bac <LCD_ILI9341_DisplayImage+0x1e8>)
 80009d6:	885b      	ldrh	r3, [r3, #2]
 80009d8:	3b01      	subs	r3, #1
 80009da:	b29b      	uxth	r3, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff3c 	bl	800085c <LCD_ILI9341_SetCursorPosition>
	LCD_ILI9341_SendCommand(ILI9341_GRAM);
 80009e4:	202c      	movs	r0, #44	@ 0x2c
 80009e6:	f7ff fef5 	bl	80007d4 <LCD_ILI9341_SendCommand>
	ILI9341_WRX_SET;
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f0:	486f      	ldr	r0, [pc, #444]	@ (8000bb0 <LCD_ILI9341_DisplayImage+0x1ec>)
 80009f2:	f002 fbeb 	bl	80031cc <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 80009f6:	2200      	movs	r2, #0
 80009f8:	2104      	movs	r1, #4
 80009fa:	486e      	ldr	r0, [pc, #440]	@ (8000bb4 <LCD_ILI9341_DisplayImage+0x1f0>)
 80009fc:	f002 fbe6 	bl	80031cc <HAL_GPIO_WritePin>

	if((&lcd_spi)->State == HAL_SPI_STATE_READY)
 8000a00:	4b6d      	ldr	r3, [pc, #436]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	f040 8310 	bne.w	800102e <LCD_ILI9341_DisplayImage+0x66a>
  {
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE((&lcd_spi)->Init.Direction)); // Check the parameters
    __HAL_LOCK((&lcd_spi));																			// Process Locked
 8000a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d101      	bne.n	8000a1c <LCD_ILI9341_DisplayImage+0x58>
 8000a18:	2302      	movs	r3, #2
 8000a1a:	e314      	b.n	8001046 <LCD_ILI9341_DisplayImage+0x682>
 8000a1c:	4b66      	ldr	r3, [pc, #408]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    (&lcd_spi)->State = HAL_SPI_STATE_BUSY_TX;									// Configure communication
 8000a24:	4b64      	ldr	r3, [pc, #400]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a26:	2203      	movs	r2, #3
 8000a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    (&lcd_spi)->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000a2c:	4b62      	ldr	r3, [pc, #392]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	655a      	str	r2, [r3, #84]	@ 0x54
    (&lcd_spi)->TxISR = 0;																			// Init field not used in handle to zero
 8000a32:	4b61      	ldr	r3, [pc, #388]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	645a      	str	r2, [r3, #68]	@ 0x44
    (&lcd_spi)->RxISR = 0;
 8000a38:	4b5f      	ldr	r3, [pc, #380]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	641a      	str	r2, [r3, #64]	@ 0x40
    (&lcd_spi)->RxXferSize   = 0;
 8000a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	879a      	strh	r2, [r3, #60]	@ 0x3c
    (&lcd_spi)->RxXferCount  = 0;
 8000a44:	4b5c      	ldr	r3, [pc, #368]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if((&lcd_spi)->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) // Reset CRC Calculation
 8000a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a52:	d10f      	bne.n	8000a74 <LCD_ILI9341_DisplayImage+0xb0>
    {
      SPI_RESET_CRC((&lcd_spi));
 8000a54:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b57      	ldr	r3, [pc, #348]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	4b54      	ldr	r3, [pc, #336]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b53      	ldr	r3, [pc, #332]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000a72:	601a      	str	r2, [r3, #0]
    }
    if((&lcd_spi)->Init.Direction == SPI_DIRECTION_1LINE)
 8000a74:	4b50      	ldr	r3, [pc, #320]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a7c:	d107      	bne.n	8000a8e <LCD_ILI9341_DisplayImage+0xca>
    {
      SPI_1LINE_TX((&lcd_spi));																	// Configure communication direction : 1Line
 8000a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b4c      	ldr	r3, [pc, #304]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a8c:	601a      	str	r2, [r3, #0]
    }
    if(((&lcd_spi)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) // Check if the SPI is already enabled
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a98:	2b40      	cmp	r3, #64	@ 0x40
 8000a9a:	d007      	beq.n	8000aac <LCD_ILI9341_DisplayImage+0xe8>
    {
      __HAL_SPI_ENABLE((&lcd_spi));															// Enable SPI peripheral
 8000a9c:	4b46      	ldr	r3, [pc, #280]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b45      	ldr	r3, [pc, #276]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000aaa:	601a      	str	r2, [r3, #0]
    }

		for(uint32_t k=0; k<IMG_TOTAL_BUF32; k++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	e1bc      	b.n	8000e2c <LCD_ILI9341_DisplayImage+0x468>
		{
			pix=image[k];
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a3f      	ldr	r2, [pc, #252]	@ (8000bbc <LCD_ILI9341_DisplayImage+0x1f8>)
 8000abe:	6013      	str	r3, [r2, #0]

			//------------------------Primer pixel en la parte baja ---------------------------------------------
			aux8=(uint8_t)(pix >> 8);
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bbc <LCD_ILI9341_DisplayImage+0x1f8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc0 <LCD_ILI9341_DisplayImage+0x1fc>)
 8000aca:	701a      	strb	r2, [r3, #0]
      (&lcd_spi)->Instance->DR = aux8;  											// Transmit data in 8 Bit mode
 8000acc:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc0 <LCD_ILI9341_DisplayImage+0x1fc>)
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	4b39      	ldr	r3, [pc, #228]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60da      	str	r2, [r3, #12]
      // Wait until TXE flag is set to send data
			tickstart = HAL_GetTick();														// Get tick
 8000ad6:	f001 ffa3 	bl	8002a20 <HAL_GetTick>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a39      	ldr	r2, [pc, #228]	@ (8000bc4 <LCD_ILI9341_DisplayImage+0x200>)
 8000ade:	6013      	str	r3, [r2, #0]
			while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000ae0:	e04c      	b.n	8000b7c <LCD_ILI9341_DisplayImage+0x1b8>
			{
				if(Timeout != HAL_MAX_DELAY)
 8000ae2:	4b39      	ldr	r3, [pc, #228]	@ (8000bc8 <LCD_ILI9341_DisplayImage+0x204>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aea:	d047      	beq.n	8000b7c <LCD_ILI9341_DisplayImage+0x1b8>
				{
					if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000aec:	4b36      	ldr	r3, [pc, #216]	@ (8000bc8 <LCD_ILI9341_DisplayImage+0x204>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d009      	beq.n	8000b08 <LCD_ILI9341_DisplayImage+0x144>
 8000af4:	f001 ff94 	bl	8002a20 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	4b32      	ldr	r3, [pc, #200]	@ (8000bc4 <LCD_ILI9341_DisplayImage+0x200>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1ad2      	subs	r2, r2, r3
 8000b00:	4b31      	ldr	r3, [pc, #196]	@ (8000bc8 <LCD_ILI9341_DisplayImage+0x204>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d939      	bls.n	8000b7c <LCD_ILI9341_DisplayImage+0x1b8>
					{
						__HAL_SPI_DISABLE_IT((&lcd_spi), (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR)); // Disable TXE, RXNE and ERR interrupts for the interrupt process
 8000b08:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8000b16:	605a      	str	r2, [r3, #4]
						__HAL_SPI_DISABLE((&lcd_spi));									// Disable SPI peripheral
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b26:	601a      	str	r2, [r3, #0]
						if((&lcd_spi)->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)					// Reset CRC Calculation
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b30:	d10f      	bne.n	8000b52 <LCD_ILI9341_DisplayImage+0x18e>
						{
							SPI_RESET_CRC((&lcd_spi));
 8000b32:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000b50:	601a      	str	r2, [r3, #0]
						}
						(&lcd_spi)->State= HAL_SPI_STATE_READY;
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
						__HAL_UNLOCK((&lcd_spi));												// Process Unlocked
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
						ILI9341_CS_SET;
 8000b62:	2201      	movs	r2, #1
 8000b64:	2104      	movs	r1, #4
 8000b66:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <LCD_ILI9341_DisplayImage+0x1f0>)
 8000b68:	f002 fb30 	bl	80031cc <HAL_GPIO_WritePin>
						ILI9341_WRX_RESET;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b72:	480f      	ldr	r0, [pc, #60]	@ (8000bb0 <LCD_ILI9341_DisplayImage+0x1ec>)
 8000b74:	f002 fb2a 	bl	80031cc <HAL_GPIO_WritePin>
						return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e264      	b.n	8001046 <LCD_ILI9341_DisplayImage+0x682>
			while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d1ab      	bne.n	8000ae2 <LCD_ILI9341_DisplayImage+0x11e>
					}
				}
			}

			aux8=(uint8_t)(pix & 0x000000FF);
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <LCD_ILI9341_DisplayImage+0x1f8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <LCD_ILI9341_DisplayImage+0x1fc>)
 8000b92:	701a      	strb	r2, [r3, #0]
      (&lcd_spi)->Instance->DR = aux8;  											// Transmit data in 8 Bit mode
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <LCD_ILI9341_DisplayImage+0x1fc>)
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <LCD_ILI9341_DisplayImage+0x1f4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60da      	str	r2, [r3, #12]
      // Wait until TXE flag is set to send data
			tickstart = HAL_GetTick();														// Get tick
 8000b9e:	f001 ff3f 	bl	8002a20 <HAL_GetTick>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <LCD_ILI9341_DisplayImage+0x200>)
 8000ba6:	6013      	str	r3, [r2, #0]
			while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000ba8:	e05d      	b.n	8000c66 <LCD_ILI9341_DisplayImage+0x2a2>
 8000baa:	bf00      	nop
 8000bac:	2000019c 	.word	0x2000019c
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	20000140 	.word	0x20000140
 8000bbc:	20000134 	.word	0x20000134
 8000bc0:	20000138 	.word	0x20000138
 8000bc4:	2000013c 	.word	0x2000013c
 8000bc8:	20000008 	.word	0x20000008
			{
				if(Timeout != HAL_MAX_DELAY)
 8000bcc:	4b8b      	ldr	r3, [pc, #556]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	d047      	beq.n	8000c66 <LCD_ILI9341_DisplayImage+0x2a2>
				{
					if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000bd6:	4b89      	ldr	r3, [pc, #548]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d009      	beq.n	8000bf2 <LCD_ILI9341_DisplayImage+0x22e>
 8000bde:	f001 ff1f 	bl	8002a20 <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	4b86      	ldr	r3, [pc, #536]	@ (8000e00 <LCD_ILI9341_DisplayImage+0x43c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	1ad2      	subs	r2, r2, r3
 8000bea:	4b84      	ldr	r3, [pc, #528]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d939      	bls.n	8000c66 <LCD_ILI9341_DisplayImage+0x2a2>
					{
						__HAL_SPI_DISABLE_IT((&lcd_spi), (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR)); // Disable TXE, RXNE and ERR interrupts for the interrupt process
 8000bf2:	4b84      	ldr	r3, [pc, #528]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4b82      	ldr	r3, [pc, #520]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8000c00:	605a      	str	r2, [r3, #4]
						__HAL_SPI_DISABLE((&lcd_spi));									// Disable SPI peripheral
 8000c02:	4b80      	ldr	r3, [pc, #512]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b7e      	ldr	r3, [pc, #504]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c10:	601a      	str	r2, [r3, #0]
						if((&lcd_spi)->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)					// Reset CRC Calculation
 8000c12:	4b7c      	ldr	r3, [pc, #496]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c1a:	d10f      	bne.n	8000c3c <LCD_ILI9341_DisplayImage+0x278>
						{
							SPI_RESET_CRC((&lcd_spi));
 8000c1c:	4b79      	ldr	r3, [pc, #484]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b78      	ldr	r3, [pc, #480]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	4b75      	ldr	r3, [pc, #468]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b74      	ldr	r3, [pc, #464]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000c3a:	601a      	str	r2, [r3, #0]
						}
						(&lcd_spi)->State= HAL_SPI_STATE_READY;
 8000c3c:	4b71      	ldr	r3, [pc, #452]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
						__HAL_UNLOCK((&lcd_spi));												// Process Unlocked
 8000c44:	4b6f      	ldr	r3, [pc, #444]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
						ILI9341_CS_SET;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2104      	movs	r1, #4
 8000c50:	486d      	ldr	r0, [pc, #436]	@ (8000e08 <LCD_ILI9341_DisplayImage+0x444>)
 8000c52:	f002 fabb 	bl	80031cc <HAL_GPIO_WritePin>
						ILI9341_WRX_RESET;
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c5c:	486b      	ldr	r0, [pc, #428]	@ (8000e0c <LCD_ILI9341_DisplayImage+0x448>)
 8000c5e:	f002 fab5 	bl	80031cc <HAL_GPIO_WritePin>
						return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e1ef      	b.n	8001046 <LCD_ILI9341_DisplayImage+0x682>
			while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000c66:	4b67      	ldr	r3, [pc, #412]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d1ab      	bne.n	8000bcc <LCD_ILI9341_DisplayImage+0x208>
					}
				}
			}
			//------------------------Segundo pixel en la parte alta --------------------------------------------
			aux8=(uint8_t)(pix >> 24);
 8000c74:	4b66      	ldr	r3, [pc, #408]	@ (8000e10 <LCD_ILI9341_DisplayImage+0x44c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	0e1b      	lsrs	r3, r3, #24
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b65      	ldr	r3, [pc, #404]	@ (8000e14 <LCD_ILI9341_DisplayImage+0x450>)
 8000c7e:	701a      	strb	r2, [r3, #0]
      (&lcd_spi)->Instance->DR = aux8;  											// Transmit data in 8 Bit mode
 8000c80:	4b64      	ldr	r3, [pc, #400]	@ (8000e14 <LCD_ILI9341_DisplayImage+0x450>)
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	4b5f      	ldr	r3, [pc, #380]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60da      	str	r2, [r3, #12]
      // Wait until TXE flag is set to send data
			tickstart = HAL_GetTick();														// Get tick
 8000c8a:	f001 fec9 	bl	8002a20 <HAL_GetTick>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a5b      	ldr	r2, [pc, #364]	@ (8000e00 <LCD_ILI9341_DisplayImage+0x43c>)
 8000c92:	6013      	str	r3, [r2, #0]
			while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000c94:	e04c      	b.n	8000d30 <LCD_ILI9341_DisplayImage+0x36c>
			{
				if(Timeout != HAL_MAX_DELAY)
 8000c96:	4b59      	ldr	r3, [pc, #356]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9e:	d047      	beq.n	8000d30 <LCD_ILI9341_DisplayImage+0x36c>
				{
					if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000ca0:	4b56      	ldr	r3, [pc, #344]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d009      	beq.n	8000cbc <LCD_ILI9341_DisplayImage+0x2f8>
 8000ca8:	f001 feba 	bl	8002a20 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b54      	ldr	r3, [pc, #336]	@ (8000e00 <LCD_ILI9341_DisplayImage+0x43c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1ad2      	subs	r2, r2, r3
 8000cb4:	4b51      	ldr	r3, [pc, #324]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d939      	bls.n	8000d30 <LCD_ILI9341_DisplayImage+0x36c>
					{
						__HAL_SPI_DISABLE_IT((&lcd_spi), (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR)); // Disable TXE, RXNE and ERR interrupts for the interrupt process
 8000cbc:	4b51      	ldr	r3, [pc, #324]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	4b50      	ldr	r3, [pc, #320]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8000cca:	605a      	str	r2, [r3, #4]
						__HAL_SPI_DISABLE((&lcd_spi));									// Disable SPI peripheral
 8000ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cda:	601a      	str	r2, [r3, #0]
						if((&lcd_spi)->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)					// Reset CRC Calculation
 8000cdc:	4b49      	ldr	r3, [pc, #292]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ce4:	d10f      	bne.n	8000d06 <LCD_ILI9341_DisplayImage+0x342>
						{
							SPI_RESET_CRC((&lcd_spi));
 8000ce6:	4b47      	ldr	r3, [pc, #284]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b45      	ldr	r3, [pc, #276]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	4b43      	ldr	r3, [pc, #268]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b41      	ldr	r3, [pc, #260]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000d04:	601a      	str	r2, [r3, #0]
						}
						(&lcd_spi)->State= HAL_SPI_STATE_READY;
 8000d06:	4b3f      	ldr	r3, [pc, #252]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
						__HAL_UNLOCK((&lcd_spi));												// Process Unlocked
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
						ILI9341_CS_SET;
 8000d16:	2201      	movs	r2, #1
 8000d18:	2104      	movs	r1, #4
 8000d1a:	483b      	ldr	r0, [pc, #236]	@ (8000e08 <LCD_ILI9341_DisplayImage+0x444>)
 8000d1c:	f002 fa56 	bl	80031cc <HAL_GPIO_WritePin>
						ILI9341_WRX_RESET;
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d26:	4839      	ldr	r0, [pc, #228]	@ (8000e0c <LCD_ILI9341_DisplayImage+0x448>)
 8000d28:	f002 fa50 	bl	80031cc <HAL_GPIO_WritePin>
						return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e18a      	b.n	8001046 <LCD_ILI9341_DisplayImage+0x682>
			while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000d30:	4b34      	ldr	r3, [pc, #208]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d1ab      	bne.n	8000c96 <LCD_ILI9341_DisplayImage+0x2d2>
					}
				}
			}

			aux8=(uint8_t)(pix >> 16);
 8000d3e:	4b34      	ldr	r3, [pc, #208]	@ (8000e10 <LCD_ILI9341_DisplayImage+0x44c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b33      	ldr	r3, [pc, #204]	@ (8000e14 <LCD_ILI9341_DisplayImage+0x450>)
 8000d48:	701a      	strb	r2, [r3, #0]
      (&lcd_spi)->Instance->DR = aux8;  											// Transmit data in 8 Bit mode
 8000d4a:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <LCD_ILI9341_DisplayImage+0x450>)
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60da      	str	r2, [r3, #12]
      // Wait until TXE flag is set to send data
			tickstart = HAL_GetTick();														// Get tick
 8000d54:	f001 fe64 	bl	8002a20 <HAL_GetTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a29      	ldr	r2, [pc, #164]	@ (8000e00 <LCD_ILI9341_DisplayImage+0x43c>)
 8000d5c:	6013      	str	r3, [r2, #0]
			while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000d5e:	e05b      	b.n	8000e18 <LCD_ILI9341_DisplayImage+0x454>
			{
				if(Timeout != HAL_MAX_DELAY)
 8000d60:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d056      	beq.n	8000e18 <LCD_ILI9341_DisplayImage+0x454>
				{
					if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000d6a:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d009      	beq.n	8000d86 <LCD_ILI9341_DisplayImage+0x3c2>
 8000d72:	f001 fe55 	bl	8002a20 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <LCD_ILI9341_DisplayImage+0x43c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	1ad2      	subs	r2, r2, r3
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <LCD_ILI9341_DisplayImage+0x438>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d948      	bls.n	8000e18 <LCD_ILI9341_DisplayImage+0x454>
					{
						__HAL_SPI_DISABLE_IT((&lcd_spi), (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR)); // Disable TXE, RXNE and ERR interrupts for the interrupt process
 8000d86:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8000d94:	605a      	str	r2, [r3, #4]
						__HAL_SPI_DISABLE((&lcd_spi));									// Disable SPI peripheral
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000da4:	601a      	str	r2, [r3, #0]
						if((&lcd_spi)->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)					// Reset CRC Calculation
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dae:	d10f      	bne.n	8000dd0 <LCD_ILI9341_DisplayImage+0x40c>
						{
							SPI_RESET_CRC((&lcd_spi));
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000dce:	601a      	str	r2, [r3, #0]
						}
						(&lcd_spi)->State= HAL_SPI_STATE_READY;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
						__HAL_UNLOCK((&lcd_spi));												// Process Unlocked
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <LCD_ILI9341_DisplayImage+0x440>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
						ILI9341_CS_SET;
 8000de0:	2201      	movs	r2, #1
 8000de2:	2104      	movs	r1, #4
 8000de4:	4808      	ldr	r0, [pc, #32]	@ (8000e08 <LCD_ILI9341_DisplayImage+0x444>)
 8000de6:	f002 f9f1 	bl	80031cc <HAL_GPIO_WritePin>
						ILI9341_WRX_RESET;
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df0:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <LCD_ILI9341_DisplayImage+0x448>)
 8000df2:	f002 f9eb 	bl	80031cc <HAL_GPIO_WritePin>
						return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e125      	b.n	8001046 <LCD_ILI9341_DisplayImage+0x682>
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	2000013c 	.word	0x2000013c
 8000e04:	20000140 	.word	0x20000140
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	20000134 	.word	0x20000134
 8000e14:	20000138 	.word	0x20000138
			while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000e18:	4b8d      	ldr	r3, [pc, #564]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d19c      	bne.n	8000d60 <LCD_ILI9341_DisplayImage+0x39c>
		for(uint32_t k=0; k<IMG_TOTAL_BUF32; k++)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000e32:	f4ff ae3e 	bcc.w	8000ab2 <LCD_ILI9341_DisplayImage+0xee>
					}
				}
			}
			//---------------------------------------------------------------------------------------
    }
		ILI9341_WRX_RESET;
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e3c:	4885      	ldr	r0, [pc, #532]	@ (8001054 <LCD_ILI9341_DisplayImage+0x690>)
 8000e3e:	f002 f9c5 	bl	80031cc <HAL_GPIO_WritePin>
		ILI9341_CS_SET;
 8000e42:	2201      	movs	r2, #1
 8000e44:	2104      	movs	r1, #4
 8000e46:	4884      	ldr	r0, [pc, #528]	@ (8001058 <LCD_ILI9341_DisplayImage+0x694>)
 8000e48:	f002 f9c0 	bl	80031cc <HAL_GPIO_WritePin>

    if((&lcd_spi)->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) // Enable CRC Transmission
 8000e4c:	4b80      	ldr	r3, [pc, #512]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e54:	d107      	bne.n	8000e66 <LCD_ILI9341_DisplayImage+0x4a2>
    {
      (&lcd_spi)->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8000e56:	4b7e      	ldr	r3, [pc, #504]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e64:	601a      	str	r2, [r3, #0]
    }
    // Wait until TXE flag is set to send data
		tickstart = HAL_GetTick();														// Get tick
 8000e66:	f001 fddb 	bl	8002a20 <HAL_GetTick>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a7b      	ldr	r2, [pc, #492]	@ (800105c <LCD_ILI9341_DisplayImage+0x698>)
 8000e6e:	6013      	str	r3, [r2, #0]
		while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000e70:	e052      	b.n	8000f18 <LCD_ILI9341_DisplayImage+0x554>
		{
			if(Timeout != HAL_MAX_DELAY)
 8000e72:	4b7b      	ldr	r3, [pc, #492]	@ (8001060 <LCD_ILI9341_DisplayImage+0x69c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7a:	d04d      	beq.n	8000f18 <LCD_ILI9341_DisplayImage+0x554>
			{
				if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e7c:	4b78      	ldr	r3, [pc, #480]	@ (8001060 <LCD_ILI9341_DisplayImage+0x69c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <LCD_ILI9341_DisplayImage+0x4d4>
 8000e84:	f001 fdcc 	bl	8002a20 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	4b74      	ldr	r3, [pc, #464]	@ (800105c <LCD_ILI9341_DisplayImage+0x698>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1ad2      	subs	r2, r2, r3
 8000e90:	4b73      	ldr	r3, [pc, #460]	@ (8001060 <LCD_ILI9341_DisplayImage+0x69c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d93f      	bls.n	8000f18 <LCD_ILI9341_DisplayImage+0x554>
				{
					__HAL_SPI_DISABLE_IT((&lcd_spi), (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR)); // Disable TXE, RXNE and ERR interrupts for the interrupt process
 8000e98:	4b6d      	ldr	r3, [pc, #436]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8000ea6:	605a      	str	r2, [r3, #4]
					__HAL_SPI_DISABLE((&lcd_spi));									// Disable SPI peripheral
 8000ea8:	4b69      	ldr	r3, [pc, #420]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b68      	ldr	r3, [pc, #416]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000eb6:	601a      	str	r2, [r3, #0]
					if((&lcd_spi)->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)					// Reset CRC Calculation
 8000eb8:	4b65      	ldr	r3, [pc, #404]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ec0:	d10f      	bne.n	8000ee2 <LCD_ILI9341_DisplayImage+0x51e>
					{
						SPI_RESET_CRC((&lcd_spi));
 8000ec2:	4b63      	ldr	r3, [pc, #396]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b61      	ldr	r3, [pc, #388]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b5d      	ldr	r3, [pc, #372]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000ee0:	601a      	str	r2, [r3, #0]
					}
					(&lcd_spi)->State= HAL_SPI_STATE_READY;
 8000ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
					(&lcd_spi)->ErrorCode |= HAL_SPI_ERROR_FLAG;		//puesto aqui
 8000eea:	4b59      	ldr	r3, [pc, #356]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eee:	f043 0320 	orr.w	r3, r3, #32
 8000ef2:	4a57      	ldr	r2, [pc, #348]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000ef4:	6553      	str	r3, [r2, #84]	@ 0x54
					__HAL_UNLOCK((&lcd_spi));												// Process Unlocked
 8000ef6:	4b56      	ldr	r3, [pc, #344]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
					ILI9341_WRX_RESET;
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f04:	4853      	ldr	r0, [pc, #332]	@ (8001054 <LCD_ILI9341_DisplayImage+0x690>)
 8000f06:	f002 f961 	bl	80031cc <HAL_GPIO_WritePin>
					ILI9341_CS_SET;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4852      	ldr	r0, [pc, #328]	@ (8001058 <LCD_ILI9341_DisplayImage+0x694>)
 8000f10:	f002 f95c 	bl	80031cc <HAL_GPIO_WritePin>
					return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e096      	b.n	8001046 <LCD_ILI9341_DisplayImage+0x682>
		while(__HAL_SPI_GET_FLAG((&lcd_spi),SPI_FLAG_TXE) == RESET)
 8000f18:	4b4d      	ldr	r3, [pc, #308]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d1a5      	bne.n	8000e72 <LCD_ILI9341_DisplayImage+0x4ae>
				}
			}
		}
    // Wait until Busy flag is reset before disabling SPI
		tickstart = HAL_GetTick();				// Get tick
 8000f26:	f001 fd7b 	bl	8002a20 <HAL_GetTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a4b      	ldr	r2, [pc, #300]	@ (800105c <LCD_ILI9341_DisplayImage+0x698>)
 8000f2e:	6013      	str	r3, [r2, #0]
		while(__HAL_SPI_GET_FLAG((&lcd_spi), SPI_FLAG_BSY) != RESET)
 8000f30:	e052      	b.n	8000fd8 <LCD_ILI9341_DisplayImage+0x614>
    {
      if(Timeout != HAL_MAX_DELAY)
 8000f32:	4b4b      	ldr	r3, [pc, #300]	@ (8001060 <LCD_ILI9341_DisplayImage+0x69c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3a:	d04d      	beq.n	8000fd8 <LCD_ILI9341_DisplayImage+0x614>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000f3c:	4b48      	ldr	r3, [pc, #288]	@ (8001060 <LCD_ILI9341_DisplayImage+0x69c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d009      	beq.n	8000f58 <LCD_ILI9341_DisplayImage+0x594>
 8000f44:	f001 fd6c 	bl	8002a20 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4b44      	ldr	r3, [pc, #272]	@ (800105c <LCD_ILI9341_DisplayImage+0x698>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1ad2      	subs	r2, r2, r3
 8000f50:	4b43      	ldr	r3, [pc, #268]	@ (8001060 <LCD_ILI9341_DisplayImage+0x69c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d93f      	bls.n	8000fd8 <LCD_ILI9341_DisplayImage+0x614>
        {
          __HAL_SPI_DISABLE_IT((&lcd_spi), (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR)); // Disable TXE, RXNE and ERR interrupts for the interrupt process
 8000f58:	4b3d      	ldr	r3, [pc, #244]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8000f66:	605a      	str	r2, [r3, #4]
          __HAL_SPI_DISABLE((&lcd_spi));		// Disable SPI peripheral
 8000f68:	4b39      	ldr	r3, [pc, #228]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b38      	ldr	r3, [pc, #224]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f76:	601a      	str	r2, [r3, #0]
          if((&lcd_spi)->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)						// Reset CRC Calculation
 8000f78:	4b35      	ldr	r3, [pc, #212]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f80:	d10f      	bne.n	8000fa2 <LCD_ILI9341_DisplayImage+0x5de>
          {
            SPI_RESET_CRC((&lcd_spi));
 8000f82:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000fa0:	601a      	str	r2, [r3, #0]
          }
          (&lcd_spi)->State= HAL_SPI_STATE_READY;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
					(&lcd_spi)->ErrorCode |= HAL_SPI_ERROR_FLAG;		//Se puso aqui
 8000faa:	4b29      	ldr	r3, [pc, #164]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	4a27      	ldr	r2, [pc, #156]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000fb4:	6553      	str	r3, [r2, #84]	@ 0x54
          __HAL_UNLOCK((&lcd_spi));												// Process Unlocked
 8000fb6:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
					ILI9341_WRX_RESET;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc4:	4823      	ldr	r0, [pc, #140]	@ (8001054 <LCD_ILI9341_DisplayImage+0x690>)
 8000fc6:	f002 f901 	bl	80031cc <HAL_GPIO_WritePin>
					ILI9341_CS_SET;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4822      	ldr	r0, [pc, #136]	@ (8001058 <LCD_ILI9341_DisplayImage+0x694>)
 8000fd0:	f002 f8fc 	bl	80031cc <HAL_GPIO_WritePin>
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e036      	b.n	8001046 <LCD_ILI9341_DisplayImage+0x682>
		while(__HAL_SPI_GET_FLAG((&lcd_spi), SPI_FLAG_BSY) != RESET)
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe2:	2b80      	cmp	r3, #128	@ 0x80
 8000fe4:	d0a5      	beq.n	8000f32 <LCD_ILI9341_DisplayImage+0x56e>
        }
      }
    }
    // Clear OVERRUN flag in 2 Lines communication mode because received is not read
    if((&lcd_spi)->Init.Direction == SPI_DIRECTION_2LINES)
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10a      	bne.n	8001004 <LCD_ILI9341_DisplayImage+0x640>
    {
      __HAL_SPI_CLEAR_OVRFLAG((&lcd_spi));
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    }
    (&lcd_spi)->State = HAL_SPI_STATE_READY;
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 8001006:	2201      	movs	r2, #1
 8001008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    __HAL_UNLOCK((&lcd_spi));															// Process Unlocked
 800100c:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <LCD_ILI9341_DisplayImage+0x68c>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		ILI9341_WRX_RESET;
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	480e      	ldr	r0, [pc, #56]	@ (8001054 <LCD_ILI9341_DisplayImage+0x690>)
 800101c:	f002 f8d6 	bl	80031cc <HAL_GPIO_WritePin>
		ILI9341_CS_SET;
 8001020:	2201      	movs	r2, #1
 8001022:	2104      	movs	r1, #4
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <LCD_ILI9341_DisplayImage+0x694>)
 8001026:	f002 f8d1 	bl	80031cc <HAL_GPIO_WritePin>
    return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e00b      	b.n	8001046 <LCD_ILI9341_DisplayImage+0x682>
  }
  else
  {
		ILI9341_WRX_RESET;
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001034:	4807      	ldr	r0, [pc, #28]	@ (8001054 <LCD_ILI9341_DisplayImage+0x690>)
 8001036:	f002 f8c9 	bl	80031cc <HAL_GPIO_WritePin>
		ILI9341_CS_SET;
 800103a:	2201      	movs	r2, #1
 800103c:	2104      	movs	r1, #4
 800103e:	4806      	ldr	r0, [pc, #24]	@ (8001058 <LCD_ILI9341_DisplayImage+0x694>)
 8001040:	f002 f8c4 	bl	80031cc <HAL_GPIO_WritePin>
    return HAL_BUSY;
 8001044:	2302      	movs	r3, #2
  }
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000140 	.word	0x20000140
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40020800 	.word	0x40020800
 800105c:	2000013c 	.word	0x2000013c
 8001060:	20000008 	.word	0x20000008

08001064 <LCD_SPI_BaudRateUp>:


void LCD_SPI_BaudRateUp()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_SPI_DeInit(&lcd_spi);
 8001068:	4805      	ldr	r0, [pc, #20]	@ (8001080 <LCD_SPI_BaudRateUp+0x1c>)
 800106a:	f003 fe74 	bl	8004d56 <HAL_SPI_DeInit>
	lcd_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2; // 45 MBits/s
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <LCD_SPI_BaudRateUp+0x1c>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  HAL_SPI_Init(&lcd_spi);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <LCD_SPI_BaudRateUp+0x1c>)
 8001076:	f003 fde5 	bl	8004c44 <HAL_SPI_Init>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000140 	.word	0x20000140

08001084 <LCD_ILI9341_DrawPixel_ImageBuffer>:


/* FUNCTIONS TO WRITE DIRECTLY IN THE IMAGE FRAME BUFFER */
//CORREGIDO
void LCD_ILI9341_DrawPixel_ImageBuffer(uint16_t x, uint16_t y, uint16_t color, uint32_t image[ILI9341_PIXEL])
{
 8001084:	b480      	push	{r7}
 8001086:	b08b      	sub	sp, #44	@ 0x2c
 8001088:	af00      	add	r7, sp, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4603      	mov	r3, r0
 800108e:	81fb      	strh	r3, [r7, #14]
 8001090:	460b      	mov	r3, r1
 8001092:	81bb      	strh	r3, [r7, #12]
 8001094:	4613      	mov	r3, r2
 8001096:	817b      	strh	r3, [r7, #10]

	uint32_t pix,dir16,dir32,aux,aux2;
	dir16=y;
 8001098:	89bb      	ldrh	r3, [r7, #12]
 800109a:	623b      	str	r3, [r7, #32]
	aux=x;
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	61fb      	str	r3, [r7, #28]
	dir16=ILI9341_HEIGHT*dir16 + aux;	//direccion 16 bits
 80010a0:	6a3a      	ldr	r2, [r7, #32]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	461a      	mov	r2, r3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4413      	add	r3, r2
 80010b0:	623b      	str	r3, [r7, #32]
	dir32=dir16/2;										//direccion 32 bits
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
	aux2=dir32*2;											//para obtener paridad
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
	aux2=dir16-aux2;
 80010be:	6a3a      	ldr	r2, [r7, #32]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]
	pix=image[dir32];									//Leer original
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
	aux=color;
 80010d2:	897b      	ldrh	r3, [r7, #10]
 80010d4:	61fb      	str	r3, [r7, #28]
	if(aux2!=0){ pix=pix&0x0000FFFF; pix=pix|(aux << 16); }//si dir16 impar (segundo pixel en la parte baja)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <LCD_ILI9341_DrawPixel_ImageBuffer+0x6a>
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	b29b      	uxth	r3, r3
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e8:	4313      	orrs	r3, r2
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ec:	e007      	b.n	80010fe <LCD_ILI9341_DrawPixel_ImageBuffer+0x7a>
	else{ pix=pix&0xFFFF0000; pix=pix|aux; }//si dir16 par (primer pixel en la parte alta)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	041b      	lsls	r3, r3, #16
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
	image[dir32]=pix;
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001108:	601a      	str	r2, [r3, #0]
	//usado para uint16_t image
	//*(image + ILI9341_HEIGHT*y + x) = color;
	//usados para uint8_t image
	//*(image + ILI9341_HEIGHT*y*2 + x*2) = color >> 8;
	//*(image + ILI9341_HEIGHT*y*2 + x*2+1) = color & 0xFF;
}
 800110a:	bf00      	nop
 800110c:	372c      	adds	r7, #44	@ 0x2c
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <LCD_ILI9341_Putc_ImageBuffer>:

//void LCD_ILI9341_Putc_ImageBuffer(uint16_t x, uint16_t y, char c, LCD_FontDef_t *font, uint16_t foreground, uint16_t* image)
void LCD_ILI9341_Putc_ImageBuffer(uint16_t x, uint16_t y, char c, LCD_FontDef_t *font, uint16_t foreground, uint32_t image[ILI9341_PIXEL])
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4603      	mov	r3, r0
 8001122:	81fb      	strh	r3, [r7, #14]
 8001124:	460b      	mov	r3, r1
 8001126:	81bb      	strh	r3, [r7, #12]
 8001128:	4613      	mov	r3, r2
 800112a:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 800112c:	4a33      	ldr	r2, [pc, #204]	@ (80011fc <LCD_ILI9341_Putc_ImageBuffer+0xe4>)
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8001132:	4a33      	ldr	r2, [pc, #204]	@ (8001200 <LCD_ILI9341_Putc_ImageBuffer+0xe8>)
 8001134:	89bb      	ldrh	r3, [r7, #12]
 8001136:	8013      	strh	r3, [r2, #0]
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 8001138:	4b30      	ldr	r3, [pc, #192]	@ (80011fc <LCD_ILI9341_Putc_ImageBuffer+0xe4>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a2f      	ldr	r2, [pc, #188]	@ (8001204 <LCD_ILI9341_Putc_ImageBuffer+0xec>)
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	4293      	cmp	r3, r2
 800114a:	dd0b      	ble.n	8001164 <LCD_ILI9341_Putc_ImageBuffer+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		ILI9341_y += font->FontHeight;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	461a      	mov	r2, r3
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <LCD_ILI9341_Putc_ImageBuffer+0xe8>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <LCD_ILI9341_Putc_ImageBuffer+0xe8>)
 800115c:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 800115e:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <LCD_ILI9341_Putc_ImageBuffer+0xe4>)
 8001160:	2200      	movs	r2, #0
 8001162:	801a      	strh	r2, [r3, #0]
	}
	for (i = 0; i < font->FontHeight; i++) {
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	e035      	b.n	80011d6 <LCD_ILI9341_Putc_ImageBuffer+0xbe>
		b = font->data[(c - 32) * font->FontHeight + i];
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	3b20      	subs	r3, #32
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	7849      	ldrb	r1, [r1, #1]
 8001176:	fb01 f303 	mul.w	r3, r1, r3
 800117a:	4619      	mov	r1, r3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	440b      	add	r3, r1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	e01a      	b.n	80011c4 <LCD_ILI9341_Putc_ImageBuffer+0xac>
			if ((b << j) & 0x8000) {
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00f      	beq.n	80011be <LCD_ILI9341_Putc_ImageBuffer+0xa6>
				LCD_ILI9341_DrawPixel_ImageBuffer(ILI9341_x + j, (ILI9341_y + i), foreground, image);
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <LCD_ILI9341_Putc_ImageBuffer+0xe4>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	b298      	uxth	r0, r3
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <LCD_ILI9341_Putc_ImageBuffer+0xe8>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	b299      	uxth	r1, r3
 80011b6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80011b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ba:	f7ff ff63 	bl	8001084 <LCD_ILI9341_DrawPixel_ImageBuffer>
		for (j = 0; j < font->FontWidth; j++) {
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d3de      	bcc.n	800118e <LCD_ILI9341_Putc_ImageBuffer+0x76>
	for (i = 0; i < font->FontHeight; i++) {
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	3301      	adds	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	461a      	mov	r2, r3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	4293      	cmp	r3, r2
 80011e0:	d3c3      	bcc.n	800116a <LCD_ILI9341_Putc_ImageBuffer+0x52>
			}
		}
	}
	ILI9341_x += font->FontWidth;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <LCD_ILI9341_Putc_ImageBuffer+0xe4>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b02      	ldr	r3, [pc, #8]	@ (80011fc <LCD_ILI9341_Putc_ImageBuffer+0xe4>)
 80011f2:	801a      	strh	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000198 	.word	0x20000198
 8001200:	2000019a 	.word	0x2000019a
 8001204:	2000019c 	.word	0x2000019c

08001208 <LCD_ILI9341_Puts_ImageBuffer>:

//void LCD_ILI9341_Puts_ImageBuffer(uint16_t x, uint16_t y, char *str, LCD_FontDef_t *font, uint16_t foreground, uint16_t* image)
void LCD_ILI9341_Puts_ImageBuffer(uint16_t x, uint16_t y, char *str, LCD_FontDef_t *font, uint16_t foreground, uint32_t image[ILI9341_PIXEL])
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af02      	add	r7, sp, #8
 800120e:	60ba      	str	r2, [r7, #8]
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4603      	mov	r3, r0
 8001214:	81fb      	strh	r3, [r7, #14]
 8001216:	460b      	mov	r3, r1
 8001218:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	82fb      	strh	r3, [r7, #22]

	/* Set X and Y coordinates */
	ILI9341_x = x;
 800121e:	4a24      	ldr	r2, [pc, #144]	@ (80012b0 <LCD_ILI9341_Puts_ImageBuffer+0xa8>)
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <LCD_ILI9341_Puts_ImageBuffer+0xac>)
 8001226:	89bb      	ldrh	r3, [r7, #12]
 8001228:	8013      	strh	r3, [r2, #0]

	while (*str) {
 800122a:	e038      	b.n	800129e <LCD_ILI9341_Puts_ImageBuffer+0x96>
		//New line
		if (*str == '\n') {
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b0a      	cmp	r3, #10
 8001232:	d11d      	bne.n	8001270 <LCD_ILI9341_Puts_ImageBuffer+0x68>
			ILI9341_y += font->FontHeight + 1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	461a      	mov	r2, r3
 800123a:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <LCD_ILI9341_Puts_ImageBuffer+0xac>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	b29b      	uxth	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <LCD_ILI9341_Puts_ImageBuffer+0xac>)
 8001248:	801a      	strh	r2, [r3, #0]
			//if after \n is also \r, than go to the left of the screen
			if (*(str + 1) == '\r') {
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3301      	adds	r3, #1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b0d      	cmp	r3, #13
 8001252:	d106      	bne.n	8001262 <LCD_ILI9341_Puts_ImageBuffer+0x5a>
				ILI9341_x = 0;
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <LCD_ILI9341_Puts_ImageBuffer+0xa8>)
 8001256:	2200      	movs	r2, #0
 8001258:	801a      	strh	r2, [r3, #0]
				str++;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	3301      	adds	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	e002      	b.n	8001268 <LCD_ILI9341_Puts_ImageBuffer+0x60>
			} else {
				ILI9341_x = startX;
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <LCD_ILI9341_Puts_ImageBuffer+0xa8>)
 8001264:	8afb      	ldrh	r3, [r7, #22]
 8001266:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3301      	adds	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
			continue;
 800126e:	e016      	b.n	800129e <LCD_ILI9341_Puts_ImageBuffer+0x96>
		} else if (*str == '\r') {
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b0d      	cmp	r3, #13
 8001276:	d103      	bne.n	8001280 <LCD_ILI9341_Puts_ImageBuffer+0x78>
			str++;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3301      	adds	r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
			continue;
 800127e:	e00e      	b.n	800129e <LCD_ILI9341_Puts_ImageBuffer+0x96>
		}

		LCD_ILI9341_Putc_ImageBuffer(ILI9341_x, ILI9341_y, *str++, font, foreground, image);
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <LCD_ILI9341_Puts_ImageBuffer+0xa8>)
 8001282:	8818      	ldrh	r0, [r3, #0]
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <LCD_ILI9341_Puts_ImageBuffer+0xac>)
 8001286:	8819      	ldrh	r1, [r3, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	8c3b      	ldrh	r3, [r7, #32]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f7ff ff3d 	bl	8001118 <LCD_ILI9341_Putc_ImageBuffer>
	while (*str) {
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1c2      	bne.n	800122c <LCD_ILI9341_Puts_ImageBuffer+0x24>
	}
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000198 	.word	0x20000198
 80012b4:	2000019a 	.word	0x2000019a

080012b8 <LCD_ILI9341_DrawLine_ImageBuffer>:


//void LCD_ILI9341_DrawLine_ImageBuffer(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color, uint16_t* image)
void LCD_ILI9341_DrawLine_ImageBuffer(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color, uint32_t image[ILI9341_PIXEL])
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4604      	mov	r4, r0
 80012c0:	4608      	mov	r0, r1
 80012c2:	4611      	mov	r1, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	4623      	mov	r3, r4
 80012c8:	80fb      	strh	r3, [r7, #6]
 80012ca:	4603      	mov	r3, r0
 80012cc:	80bb      	strh	r3, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	807b      	strh	r3, [r7, #2]
 80012d2:	4613      	mov	r3, r2
 80012d4:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2;

	/* Check for overflow */
	if (x0 >= ILI9341_Opts.width) {
 80012d6:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <LCD_ILI9341_DrawLine_ImageBuffer+0x160>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	88fa      	ldrh	r2, [r7, #6]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d303      	bcc.n	80012e8 <LCD_ILI9341_DrawLine_ImageBuffer+0x30>
		x0 = ILI9341_Opts.width - 1;
 80012e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001418 <LCD_ILI9341_DrawLine_ImageBuffer+0x160>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= ILI9341_Opts.width) {
 80012e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <LCD_ILI9341_DrawLine_ImageBuffer+0x160>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	887a      	ldrh	r2, [r7, #2]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d303      	bcc.n	80012fa <LCD_ILI9341_DrawLine_ImageBuffer+0x42>
		x1 = ILI9341_Opts.width - 1;
 80012f2:	4b49      	ldr	r3, [pc, #292]	@ (8001418 <LCD_ILI9341_DrawLine_ImageBuffer+0x160>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= ILI9341_Opts.height) {
 80012fa:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <LCD_ILI9341_DrawLine_ImageBuffer+0x160>)
 80012fc:	885b      	ldrh	r3, [r3, #2]
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d303      	bcc.n	800130c <LCD_ILI9341_DrawLine_ImageBuffer+0x54>
		y0 = ILI9341_Opts.height - 1;
 8001304:	4b44      	ldr	r3, [pc, #272]	@ (8001418 <LCD_ILI9341_DrawLine_ImageBuffer+0x160>)
 8001306:	885b      	ldrh	r3, [r3, #2]
 8001308:	3b01      	subs	r3, #1
 800130a:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= ILI9341_Opts.height) {
 800130c:	4b42      	ldr	r3, [pc, #264]	@ (8001418 <LCD_ILI9341_DrawLine_ImageBuffer+0x160>)
 800130e:	885b      	ldrh	r3, [r3, #2]
 8001310:	883a      	ldrh	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d303      	bcc.n	800131e <LCD_ILI9341_DrawLine_ImageBuffer+0x66>
		y1 = ILI9341_Opts.height - 1;
 8001316:	4b40      	ldr	r3, [pc, #256]	@ (8001418 <LCD_ILI9341_DrawLine_ImageBuffer+0x160>)
 8001318:	885b      	ldrh	r3, [r3, #2]
 800131a:	3b01      	subs	r3, #1
 800131c:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 800131e:	88fa      	ldrh	r2, [r7, #6]
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	429a      	cmp	r2, r3
 8001324:	d205      	bcs.n	8001332 <LCD_ILI9341_DrawLine_ImageBuffer+0x7a>
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	b21b      	sxth	r3, r3
 8001330:	e004      	b.n	800133c <LCD_ILI9341_DrawLine_ImageBuffer+0x84>
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	b21b      	sxth	r3, r3
 800133c:	82bb      	strh	r3, [r7, #20]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	883b      	ldrh	r3, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d205      	bcs.n	8001352 <LCD_ILI9341_DrawLine_ImageBuffer+0x9a>
 8001346:	883a      	ldrh	r2, [r7, #0]
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	b21b      	sxth	r3, r3
 8001350:	e004      	b.n	800135c <LCD_ILI9341_DrawLine_ImageBuffer+0xa4>
 8001352:	88ba      	ldrh	r2, [r7, #4]
 8001354:	883b      	ldrh	r3, [r7, #0]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21b      	sxth	r3, r3
 800135c:	827b      	strh	r3, [r7, #18]
	sx = (x0 < x1) ? 1 : -1;
 800135e:	88fa      	ldrh	r2, [r7, #6]
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	429a      	cmp	r2, r3
 8001364:	d201      	bcs.n	800136a <LCD_ILI9341_DrawLine_ImageBuffer+0xb2>
 8001366:	2301      	movs	r3, #1
 8001368:	e001      	b.n	800136e <LCD_ILI9341_DrawLine_ImageBuffer+0xb6>
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	823b      	strh	r3, [r7, #16]
	sy = (y0 < y1) ? 1 : -1;
 8001370:	88ba      	ldrh	r2, [r7, #4]
 8001372:	883b      	ldrh	r3, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d201      	bcs.n	800137c <LCD_ILI9341_DrawLine_ImageBuffer+0xc4>
 8001378:	2301      	movs	r3, #1
 800137a:	e001      	b.n	8001380 <LCD_ILI9341_DrawLine_ImageBuffer+0xc8>
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	81fb      	strh	r3, [r7, #14]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001382:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001386:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800138a:	429a      	cmp	r2, r3
 800138c:	dd06      	ble.n	800139c <LCD_ILI9341_DrawLine_ImageBuffer+0xe4>
 800138e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001392:	0fda      	lsrs	r2, r3, #31
 8001394:	4413      	add	r3, r2
 8001396:	105b      	asrs	r3, r3, #1
 8001398:	b21b      	sxth	r3, r3
 800139a:	e006      	b.n	80013aa <LCD_ILI9341_DrawLine_ImageBuffer+0xf2>
 800139c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013a0:	0fda      	lsrs	r2, r3, #31
 80013a2:	4413      	add	r3, r2
 80013a4:	105b      	asrs	r3, r3, #1
 80013a6:	425b      	negs	r3, r3
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	82fb      	strh	r3, [r7, #22]

	while (1) {
		LCD_ILI9341_DrawPixel_ImageBuffer(x0, y0, color, image);
 80013ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013ae:	88b9      	ldrh	r1, [r7, #4]
 80013b0:	88f8      	ldrh	r0, [r7, #6]
 80013b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b4:	f7ff fe66 	bl	8001084 <LCD_ILI9341_DrawPixel_ImageBuffer>
		if (x0 == x1 && y0 == y1) {
 80013b8:	88fa      	ldrh	r2, [r7, #6]
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d103      	bne.n	80013c8 <LCD_ILI9341_DrawLine_ImageBuffer+0x110>
 80013c0:	88ba      	ldrh	r2, [r7, #4]
 80013c2:	883b      	ldrh	r3, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d021      	beq.n	800140c <LCD_ILI9341_DrawLine_ImageBuffer+0x154>
			break;
		}
		e2 = err;
 80013c8:	8afb      	ldrh	r3, [r7, #22]
 80013ca:	81bb      	strh	r3, [r7, #12]
		if (e2 > -dx) {
 80013cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013d4:	425b      	negs	r3, r3
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dd08      	ble.n	80013ec <LCD_ILI9341_DrawLine_ImageBuffer+0x134>
			err -= dy;
 80013da:	8afa      	ldrh	r2, [r7, #22]
 80013dc:	8a7b      	ldrh	r3, [r7, #18]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80013e4:	8a3a      	ldrh	r2, [r7, #16]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4413      	add	r3, r2
 80013ea:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 80013ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dad9      	bge.n	80013ac <LCD_ILI9341_DrawLine_ImageBuffer+0xf4>
			err += dx;
 80013f8:	8afa      	ldrh	r2, [r7, #22]
 80013fa:	8abb      	ldrh	r3, [r7, #20]
 80013fc:	4413      	add	r3, r2
 80013fe:	b29b      	uxth	r3, r3
 8001400:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001402:	89fa      	ldrh	r2, [r7, #14]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	80bb      	strh	r3, [r7, #4]
		LCD_ILI9341_DrawPixel_ImageBuffer(x0, y0, color, image);
 800140a:	e7cf      	b.n	80013ac <LCD_ILI9341_DrawLine_ImageBuffer+0xf4>
			break;
 800140c:	bf00      	nop
		}
	}
}
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	2000019c 	.word	0x2000019c

0800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>:
}


//void LCD_ILI9341_DrawFilledRectangle_ImageBuffer(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color, uint16_t* image)
void LCD_ILI9341_DrawFilledRectangle_ImageBuffer(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color, uint32_t image[ILI9341_PIXEL])
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af02      	add	r7, sp, #8
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	803b      	strh	r3, [r7, #0]
	for (; x0 < x1; x0++) {
 800143a:	e00d      	b.n	8001458 <LCD_ILI9341_DrawFilledRectangle_ImageBuffer+0x3c>
		LCD_ILI9341_DrawLine_ImageBuffer(x0, y0, x0, y1, color, image);
 800143c:	883c      	ldrh	r4, [r7, #0]
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	88b9      	ldrh	r1, [r7, #4]
 8001442:	88f8      	ldrh	r0, [r7, #6]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	8b3b      	ldrh	r3, [r7, #24]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	4623      	mov	r3, r4
 800144e:	f7ff ff33 	bl	80012b8 <LCD_ILI9341_DrawLine_ImageBuffer>
	for (; x0 < x1; x0++) {
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	80fb      	strh	r3, [r7, #6]
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3ed      	bcc.n	800143c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer+0x20>
	}
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}
	...

0800146c <TP_Config>:


//************************************** FUNCIONES DEL TOUCH *************************************************************************
// Configures the touch Panel Controller (Single point detection)
uint8_t TP_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	uint16_t tmp = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	80fb      	strh	r3, [r7, #6]

  tmp = TP_ReadDeviceRegister(0);															// Read IO Expander device ID
 8001476:	2000      	movs	r0, #0
 8001478:	f000 f9a2 	bl	80017c0 <TP_ReadDeviceRegister>
 800147c:	4603      	mov	r3, r0
 800147e:	80fb      	strh	r3, [r7, #6]
  tmp = (uint32_t)(tmp << 8);
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	80fb      	strh	r3, [r7, #6]
  tmp |= (uint32_t)TP_ReadDeviceRegister(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f000 f99a 	bl	80017c0 <TP_ReadDeviceRegister>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4313      	orrs	r3, r2
 8001494:	80fb      	strh	r3, [r7, #6]
  if( tmp != (uint16_t)STMPE811_ID ){ return 1; }     				// Return Error '1' if the ID is not correct
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	f640 0211 	movw	r2, #2065	@ 0x811
 800149c:	4293      	cmp	r3, r2
 800149e:	d001      	beq.n	80014a4 <TP_Config+0x38>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e048      	b.n	8001536 <TP_Config+0xca>

  TP_Reset(); 																								// Generate IO Expander Software reset
 80014a4:	f000 f927 	bl	80016f6 <TP_Reset>
  TP_FnctCmd(TP_ADC_FCT, ENABLE);															// Touch Panel controller and ADC configuration
 80014a8:	2101      	movs	r1, #1
 80014aa:	2001      	movs	r0, #1
 80014ac:	f000 f933 	bl	8001716 <TP_FnctCmd>
	TP_FnctCmd(TP_TP_FCT, ENABLE);															// Enable touch Panel functionality
 80014b0:	2101      	movs	r1, #1
 80014b2:	2002      	movs	r0, #2
 80014b4:	f000 f92f 	bl	8001716 <TP_FnctCmd>
  TP_WriteDeviceRegister(TP_REG_ADC_CTRL1, 0x49);						  // Select Sample Time, bit number and ADC Reference
 80014b8:	2149      	movs	r1, #73	@ 0x49
 80014ba:	2020      	movs	r0, #32
 80014bc:	f000 f9c4 	bl	8001848 <TP_WriteDeviceRegister>
  LCD_ILI9341_Delay(200);																			// Wait for ~20 ms
 80014c0:	20c8      	movs	r0, #200	@ 0xc8
 80014c2:	f7ff f975 	bl	80007b0 <LCD_ILI9341_Delay>
  TP_WriteDeviceRegister(TP_REG_ADC_CTRL2, 0x01);							// Select the ADC clock speed: 3.25 MHz
 80014c6:	2101      	movs	r1, #1
 80014c8:	2021      	movs	r0, #33	@ 0x21
 80014ca:	f000 f9bd 	bl	8001848 <TP_WriteDeviceRegister>
  TP_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);							// Select TSC pins in non default mode, NO se necesita por STM32F4i-DISCO
 80014ce:	2100      	movs	r1, #0
 80014d0:	201e      	movs	r0, #30
 80014d2:	f000 f94a 	bl	800176a <TP_IOAFConfig>
  TP_WriteDeviceRegister(TP_REG_TP_CFG, 0x9A); 								// Select 2 nF filter capacitor
 80014d6:	219a      	movs	r1, #154	@ 0x9a
 80014d8:	2041      	movs	r0, #65	@ 0x41
 80014da:	f000 f9b5 	bl	8001848 <TP_WriteDeviceRegister>
  TP_WriteDeviceRegister(TP_REG_FIFO_TH, 0x01);								// Select single point reading
 80014de:	2101      	movs	r1, #1
 80014e0:	204a      	movs	r0, #74	@ 0x4a
 80014e2:	f000 f9b1 	bl	8001848 <TP_WriteDeviceRegister>
  TP_WriteDeviceRegister(TP_REG_FIFO_STA, 0x01);							// Write 0x01 to clear the FIFO memory content.
 80014e6:	2101      	movs	r1, #1
 80014e8:	204b      	movs	r0, #75	@ 0x4b
 80014ea:	f000 f9ad 	bl	8001848 <TP_WriteDeviceRegister>
  TP_WriteDeviceRegister(TP_REG_FIFO_STA, 0x00);							// Write 0x00 to put the FIFO back into operation mode
 80014ee:	2100      	movs	r1, #0
 80014f0:	204b      	movs	r0, #75	@ 0x4b
 80014f2:	f000 f9a9 	bl	8001848 <TP_WriteDeviceRegister>
  TP_WriteDeviceRegister(TP_REG_TP_FRACT_XYZ, 0x01);					// set the data format for Z value: 7 fractional part and 1 whole part
 80014f6:	2101      	movs	r1, #1
 80014f8:	2056      	movs	r0, #86	@ 0x56
 80014fa:	f000 f9a5 	bl	8001848 <TP_WriteDeviceRegister>
  TP_WriteDeviceRegister(TP_REG_TP_I_DRIVE, 0x01);						// set the driving capability of the device for TSC pins: 50mA
 80014fe:	2101      	movs	r1, #1
 8001500:	2058      	movs	r0, #88	@ 0x58
 8001502:	f000 f9a1 	bl	8001848 <TP_WriteDeviceRegister>
  TP_WriteDeviceRegister(TP_REG_TP_CTRL, 0x03);								// Use no tracking index, touch-panel controller operation mode (XYZ) and enable the TSC
 8001506:	2103      	movs	r1, #3
 8001508:	2040      	movs	r0, #64	@ 0x40
 800150a:	f000 f99d 	bl	8001848 <TP_WriteDeviceRegister>
  TP_WriteDeviceRegister(TP_REG_INT_STA, 0xFF); 							//  Clear all the status pending bits
 800150e:	21ff      	movs	r1, #255	@ 0xff
 8001510:	200b      	movs	r0, #11
 8001512:	f000 f999 	bl	8001848 <TP_WriteDeviceRegister>
  TP_State.TouchDetected = TP_State.X = TP_State.Y = TP_State.Z = 0;// Initialize the TS structure to their default values
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <TP_Config+0xd4>)
 8001518:	2200      	movs	r2, #0
 800151a:	80da      	strh	r2, [r3, #6]
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <TP_Config+0xd4>)
 800151e:	88da      	ldrh	r2, [r3, #6]
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <TP_Config+0xd4>)
 8001522:	809a      	strh	r2, [r3, #4]
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <TP_Config+0xd4>)
 8001526:	889a      	ldrh	r2, [r3, #4]
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <TP_Config+0xd4>)
 800152a:	805a      	strh	r2, [r3, #2]
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <TP_Config+0xd4>)
 800152e:	885a      	ldrh	r2, [r3, #2]
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <TP_Config+0xd4>)
 8001532:	801a      	strh	r2, [r3, #0]

  return 0; 																									// Configuration is OK
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001a4 	.word	0x200001a4

08001544 <TP_GetState>:


// Returns Status and positions of the Touch Panel.
// retval Pointer to TP_STATE structure holding Touch Panel information.
TP_STATE* TP_GetState(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;

  TP_State.TouchDetected = (TP_ReadDeviceRegister(TP_REG_TP_CTRL) & 0x80); // Check if the Touch detect event happened
 800154a:	2040      	movs	r0, #64	@ 0x40
 800154c:	f000 f938 	bl	80017c0 <TP_ReadDeviceRegister>
 8001550:	4603      	mov	r3, r0
 8001552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <TP_GetState+0xc4>)
 800155a:	801a      	strh	r2, [r3, #0]

  if(TP_State.TouchDetected)
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <TP_GetState+0xc4>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d034      	beq.n	80015ce <TP_GetState+0x8a>
  {
		x=1; y=1;
 8001564:	2301      	movs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	2301      	movs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
		x = TP_Read_X();
 800156c:	f000 f852 	bl	8001614 <TP_Read_X>
 8001570:	4603      	mov	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]
    y = TP_Read_Y();
 8001574:	f000 f882 	bl	800167c <TP_Read_Y>
 8001578:	4603      	mov	r3, r0
 800157a:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 800157c:	4b23      	ldr	r3, [pc, #140]	@ (800160c <TP_GetState+0xc8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	429a      	cmp	r2, r3
 8001584:	d904      	bls.n	8001590 <TP_GetState+0x4c>
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <TP_GetState+0xc8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	e003      	b.n	8001598 <TP_GetState+0x54>
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <TP_GetState+0xc8>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <TP_GetState+0xcc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d904      	bls.n	80015ae <TP_GetState+0x6a>
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <TP_GetState+0xcc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	e003      	b.n	80015b6 <TP_GetState+0x72>
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <TP_GetState+0xcc>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d905      	bls.n	80015ce <TP_GetState+0x8a>
    {
      _x = x;
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <TP_GetState+0xc8>)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6013      	str	r3, [r2, #0]
      _y = y;
 80015c8:	4a11      	ldr	r2, [pc, #68]	@ (8001610 <TP_GetState+0xcc>)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	6013      	str	r3, [r2, #0]
    }
  }
  TP_State.X = _x;																						// Update the X position
 80015ce:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <TP_GetState+0xc8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <TP_GetState+0xc4>)
 80015d6:	805a      	strh	r2, [r3, #2]
  TP_State.Y = _y;																						// Update the Y position
 80015d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <TP_GetState+0xcc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <TP_GetState+0xc4>)
 80015e0:	809a      	strh	r2, [r3, #4]
  TP_State.Z = TP_Read_Z();  																	// Update the Z Pression index
 80015e2:	f000 f875 	bl	80016d0 <TP_Read_Z>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <TP_GetState+0xc4>)
 80015ec:	80da      	strh	r2, [r3, #6]

  TP_WriteDeviceRegister(TP_REG_FIFO_STA, 0x01);							// Clear the interrupt pending bit and enable the FIFO again
 80015ee:	2101      	movs	r1, #1
 80015f0:	204b      	movs	r0, #75	@ 0x4b
 80015f2:	f000 f929 	bl	8001848 <TP_WriteDeviceRegister>
  TP_WriteDeviceRegister(TP_REG_FIFO_STA, 0x00);
 80015f6:	2100      	movs	r1, #0
 80015f8:	204b      	movs	r0, #75	@ 0x4b
 80015fa:	f000 f925 	bl	8001848 <TP_WriteDeviceRegister>

  return &TP_State; 																					// Return pointer to the updated structure
 80015fe:	4b02      	ldr	r3, [pc, #8]	@ (8001608 <TP_GetState+0xc4>)
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200001a4 	.word	0x200001a4
 800160c:	200259c0 	.word	0x200259c0
 8001610:	200259c4 	.word	0x200259c4

08001614 <TP_Read_X>:


// Return Touch Panel X position value
// retval: X position.
static uint16_t TP_Read_X(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  int32_t x, xr;

  x = TP_ReadDataBuffer(TP_REG_TP_DATA_X);										// Read x value from DATA_X register
 800161a:	204d      	movs	r0, #77	@ 0x4d
 800161c:	f000 f942 	bl	80018a4 <TP_ReadDataBuffer>
 8001620:	4603      	mov	r3, r0
 8001622:	607b      	str	r3, [r7, #4]

  if(x <= 3000)																								// x value first correction
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800162a:	4293      	cmp	r3, r2
 800162c:	dc05      	bgt.n	800163a <TP_Read_X+0x26>
  {
		x = 3870 - x;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8001634:	330e      	adds	r3, #14
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	e004      	b.n	8001644 <TP_Read_X+0x30>
  }
  else
  {
		x = 3800 - x;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8001640:	3308      	adds	r3, #8
 8001642:	607b      	str	r3, [r7, #4]
  }
  xr = x / 15;																								// x value second correction
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0c      	ldr	r2, [pc, #48]	@ (8001678 <TP_Read_X+0x64>)
 8001648:	fb82 1203 	smull	r1, r2, r2, r3
 800164c:	441a      	add	r2, r3
 800164e:	10d2      	asrs	r2, r2, #3
 8001650:	17db      	asrs	r3, r3, #31
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	603b      	str	r3, [r7, #0]
  if(xr <= 0)																									// return x position value
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dc02      	bgt.n	8001662 <TP_Read_X+0x4e>
  {
    xr = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e004      	b.n	800166c <TP_Read_X+0x58>
  }
  else if (xr > 240)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2bf0      	cmp	r3, #240	@ 0xf0
 8001666:	dd01      	ble.n	800166c <TP_Read_X+0x58>
  {
    xr = 239;
 8001668:	23ef      	movs	r3, #239	@ 0xef
 800166a:	603b      	str	r3, [r7, #0]
  }
  else
  {}
  return (uint16_t)(xr);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b29b      	uxth	r3, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	88888889 	.word	0x88888889

0800167c <TP_Read_Y>:

// Return Touch Panel Y position value
// retval: Y position.
static uint16_t TP_Read_Y(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  int32_t y, yr;

  y = TP_ReadDataBuffer(TP_REG_TP_DATA_Y);							  		// Read y value from DATA_Y register
 8001682:	204f      	movs	r0, #79	@ 0x4f
 8001684:	f000 f90e 	bl	80018a4 <TP_ReadDataBuffer>
 8001688:	4603      	mov	r3, r0
 800168a:	603b      	str	r3, [r7, #0]
	y -= 360;  																									// y value first correction
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001692:	603b      	str	r3, [r7, #0]
  yr = y / 11;																								// y value second correction
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <TP_Read_Y+0x50>)
 8001698:	fb82 1203 	smull	r1, r2, r2, r3
 800169c:	1052      	asrs	r2, r2, #1
 800169e:	17db      	asrs	r3, r3, #31
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	607b      	str	r3, [r7, #4]
  if(yr <= 0)																									// return y position value
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc02      	bgt.n	80016b0 <TP_Read_Y+0x34>
  {
    yr = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	e006      	b.n	80016be <TP_Read_Y+0x42>
  }
  else if (yr > 320)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80016b6:	dd02      	ble.n	80016be <TP_Read_Y+0x42>
  {
    yr = 319;
 80016b8:	f240 133f 	movw	r3, #319	@ 0x13f
 80016bc:	607b      	str	r3, [r7, #4]
  }
  else
  {}
  return (uint16_t)(yr);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	b29b      	uxth	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2e8ba2e9 	.word	0x2e8ba2e9

080016d0 <TP_Read_Z>:

// Return Touch Panel Z position value
// retval: Z position.
static uint16_t TP_Read_Z(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  uint32_t z;

  z = TP_ReadDataBuffer(TP_REG_TP_DATA_Z);										// Read z value from DATA_Z register
 80016d6:	2051      	movs	r0, #81	@ 0x51
 80016d8:	f000 f8e4 	bl	80018a4 <TP_ReadDataBuffer>
 80016dc:	4603      	mov	r3, r0
 80016de:	607b      	str	r3, [r7, #4]
	if(z <= 0)																									// return z position value
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <TP_Read_Z+0x1a>
    z = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  return (uint16_t)(z);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	b29b      	uxth	r3, r3
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <TP_Reset>:


// Resets the IO Expander by Software (SYS_CTRL1, RESET bit).
// retval 0: if all initializations are OK. Other value if error.
uint8_t TP_Reset(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
  TP_WriteDeviceRegister(TP_REG_SYS_CTRL1, 0x02);							// Power Down the IO_Expander
 80016fa:	2102      	movs	r1, #2
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f8a3 	bl	8001848 <TP_WriteDeviceRegister>
  LCD_ILI9341_Delay(2); 																			// wait for a delay to insure registers erasing
 8001702:	2002      	movs	r0, #2
 8001704:	f7ff f854 	bl	80007b0 <LCD_ILI9341_Delay>
  TP_WriteDeviceRegister(TP_REG_SYS_CTRL1, 0x00);							// Power On the Codec after the power off => all registers are reinitialized
 8001708:	2100      	movs	r1, #0
 800170a:	2003      	movs	r0, #3
 800170c:	f000 f89c 	bl	8001848 <TP_WriteDeviceRegister>
  return 0;    																								// If all OK return IOE_OK
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}

08001716 <TP_FnctCmd>:
// param:   Fct: the functions to be configured. could be any combination of the following values:
//          arg:  IOE_IO_FCT : IO function, IOE_TP_FCT : Touch Panel function, IOE_ADC_FCT : ADC function
// param:  NewState: can be ENABLE pr DISABLE
// retval: IOE_OK: if all initializations are OK. Other value if error.
uint8_t TP_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	460a      	mov	r2, r1
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	4613      	mov	r3, r2
 8001724:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]

  tmp = TP_ReadDeviceRegister(TP_REG_SYS_CTRL2);							// Get the register value
 800172a:	2004      	movs	r0, #4
 800172c:	f000 f848 	bl	80017c0 <TP_ReadDeviceRegister>
 8001730:	4603      	mov	r3, r0
 8001732:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <TP_FnctCmd+0x38>
  {
    tmp &= ~(uint8_t)Fct;																			// Set the Functionalities to be Enabled
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	43db      	mvns	r3, r3
 8001740:	b25a      	sxtb	r2, r3
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4013      	ands	r3, r2
 8001748:	b25b      	sxtb	r3, r3
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e003      	b.n	8001756 <TP_FnctCmd+0x40>
  }
  else
  {
    tmp |= (uint8_t)Fct;  																		// Set the Functionalities to be Disabled
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	4313      	orrs	r3, r2
 8001754:	73fb      	strb	r3, [r7, #15]
  }
  TP_WriteDeviceRegister(TP_REG_SYS_CTRL2, tmp);							// Set the register value
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4619      	mov	r1, r3
 800175a:	2004      	movs	r0, #4
 800175c:	f000 f874 	bl	8001848 <TP_WriteDeviceRegister>
  return 0;    																								// If all OK return IOE_OK
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <TP_IOAFConfig>:

// Configures the selected pin to be in Alternate function or not. NO necesitada funcion STM32F4i disco
// param:  IO_Pin: IO_Pin_x, Where x can be from 0 to 7, NewState: State of the AF for the selected pin, could be ENABLE or DISABLE.
// retval: 0: if all initializations are OK. Other value if error.
uint8_t TP_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	460a      	mov	r2, r1
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	4613      	mov	r3, r2
 8001778:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  tmp = TP_ReadDeviceRegister(TP_REG_GPIO_AF);								// Get the current state of the GPIO_AF register
 800177e:	2017      	movs	r0, #23
 8001780:	f000 f81e 	bl	80017c0 <TP_ReadDeviceRegister>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <TP_IOAFConfig+0x2e>
  {
    tmp |= (uint8_t)IO_Pin;																		// Enable the selected pins alternate function
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4313      	orrs	r3, r2
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e008      	b.n	80017aa <TP_IOAFConfig+0x40>
  }
  else
  {
    tmp &= ~(uint8_t)IO_Pin;   																// Disable the selected pins alternate function
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	43db      	mvns	r3, r3
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a4:	4013      	ands	r3, r2
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	73fb      	strb	r3, [r7, #15]
  }
  TP_WriteDeviceRegister(TP_REG_GPIO_AF, tmp);  							// Write back the new value in GPIO_AF register
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	4619      	mov	r1, r3
 80017ae:	2017      	movs	r0, #23
 80017b0:	f000 f84a 	bl	8001848 <TP_WriteDeviceRegister>
  return 0;																										// If all OK return IOE_OK
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <TP_ReadDeviceRegister>:

// Reads a register of the device through I2C without DMA.
// param:  RegisterAddr: The target register address (between 00x and 0x24)
// retval: The value of the read register (0xAA if Timeout occurred)
uint8_t TP_ReadDeviceRegister(uint8_t RegisterAddr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Address;
	uint8_t buf[2] = {RegisterAddr,RegisterAddr};
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	733b      	strb	r3, [r7, #12]
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	737b      	strb	r3, [r7, #13]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d6:	b672      	cpsid	i
}
 80017d8:	bf00      	nop

  __disable_irq();
	Address = TP_ADDR;
 80017da:	2382      	movs	r3, #130	@ 0x82
 80017dc:	73bb      	strb	r3, [r7, #14]
  Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);     					// Reset the address bit0 for write
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	73bb      	strb	r3, [r7, #14]
	if (HAL_I2C_Master_Transmit(&hi2c3, Address, buf, (uint16_t)1, 1000) != HAL_OK) { return 0xAA; }
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	b299      	uxth	r1, r3
 80017ea:	f107 020c 	add.w	r2, r7, #12
 80017ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	4813      	ldr	r0, [pc, #76]	@ (8001844 <TP_ReadDeviceRegister+0x84>)
 80017f8:	f001 fe84 	bl	8003504 <HAL_I2C_Master_Transmit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <TP_ReadDeviceRegister+0x46>
 8001802:	23aa      	movs	r3, #170	@ 0xaa
 8001804:	e01a      	b.n	800183c <TP_ReadDeviceRegister+0x7c>
	Address = TP_ADDR;
 8001806:	2382      	movs	r3, #130	@ 0x82
 8001808:	73bb      	strb	r3, [r7, #14]
  Address |= I2C_OAR1_ADD0;																		// Set the address bit0 for read
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	73bb      	strb	r3, [r7, #14]
	if (HAL_I2C_Master_Receive(&hi2c3, Address, &buf[0], 1, 1000) != HAL_OK) {   return 0xAA; }
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	b299      	uxth	r1, r3
 8001816:	f107 020c 	add.w	r2, r7, #12
 800181a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	4808      	ldr	r0, [pc, #32]	@ (8001844 <TP_ReadDeviceRegister+0x84>)
 8001824:	f001 ff6c 	bl	8003700 <HAL_I2C_Master_Receive>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <TP_ReadDeviceRegister+0x72>
 800182e:	23aa      	movs	r3, #170	@ 0xaa
 8001830:	e004      	b.n	800183c <TP_ReadDeviceRegister+0x7c>
	tmp=buf[0];
 8001832:	7b3b      	ldrb	r3, [r7, #12]
 8001834:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001836:	b662      	cpsie	i
}
 8001838:	bf00      	nop
	__enable_irq();

  return tmp;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000040 	.word	0x20000040

08001848 <TP_WriteDeviceRegister>:

// Writes a value in a register of the device through I2C.
// param;  RegisterAddr: The target register address,  RegisterValue: The target register value to be written
// retval: 0 if all operations are OK. Other value if error.
uint8_t TP_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	uint8_t Address;
  uint8_t buf[2] = {RegisterAddr, RegisterValue};
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	733b      	strb	r3, [r7, #12]
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	737b      	strb	r3, [r7, #13]
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop

	__disable_irq();
	Address = TP_ADDR;
 8001864:	2382      	movs	r3, #130	@ 0x82
 8001866:	73fb      	strb	r3, [r7, #15]
  Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);     					// Reset the address bit0 for write
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
  if (HAL_I2C_Master_Transmit(&hi2c3, Address, buf, (uint16_t)2, 1000) != HAL_OK){ return 1; }
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	b299      	uxth	r1, r3
 8001874:	f107 020c 	add.w	r2, r7, #12
 8001878:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2302      	movs	r3, #2
 8001880:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <TP_WriteDeviceRegister+0x58>)
 8001882:	f001 fe3f 	bl	8003504 <HAL_I2C_Master_Transmit>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <TP_WriteDeviceRegister+0x48>
 800188c:	2301      	movs	r3, #1
 800188e:	e002      	b.n	8001896 <TP_WriteDeviceRegister+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 8001890:	b662      	cpsie	i
}
 8001892:	bf00      	nop
	__enable_irq();
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000040 	.word	0x20000040

080018a4 <TP_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register adress (between 00x and 0x24)
  * @retval The data in the buffer containing the two returned bytes (in halfword).
  */
uint16_t TP_ReadDataBuffer(uint32_t RegisterAddr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
	//uint8_t tmp = 0;
	uint8_t Address;
  uint8_t TP_BufferRX[2] = {RegisterAddr,RegisterAddr};
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	733b      	strb	r3, [r7, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	737b      	strb	r3, [r7, #13]
	uint8_t buf[2] = {RegisterAddr,RegisterAddr};
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	723b      	strb	r3, [r7, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	727b      	strb	r3, [r7, #9]
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop

  __disable_irq();
	Address = TP_ADDR;
 80018c8:	2382      	movs	r3, #130	@ 0x82
 80018ca:	73fb      	strb	r3, [r7, #15]
  Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);     					// Reset the address bit0 for write
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(&hi2c3, Address, buf, (uint16_t)1, 1000) != HAL_OK) { return 0xAA; }
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	b299      	uxth	r1, r3
 80018d8:	f107 0208 	add.w	r2, r7, #8
 80018dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2301      	movs	r3, #1
 80018e4:	481e      	ldr	r0, [pc, #120]	@ (8001960 <TP_ReadDataBuffer+0xbc>)
 80018e6:	f001 fe0d 	bl	8003504 <HAL_I2C_Master_Transmit>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <TP_ReadDataBuffer+0x50>
 80018f0:	23aa      	movs	r3, #170	@ 0xaa
 80018f2:	e030      	b.n	8001956 <TP_ReadDataBuffer+0xb2>
	Address = TP_ADDR;
 80018f4:	2382      	movs	r3, #130	@ 0x82
 80018f6:	73fb      	strb	r3, [r7, #15]
  Address |= I2C_OAR1_ADD0;																		// Set the address bit0 for read
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Receive(&hi2c3, Address, &TP_BufferRX[1], 1, 1000) != HAL_OK) {   return 0xAA; }
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	b299      	uxth	r1, r3
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	4813      	ldr	r0, [pc, #76]	@ (8001960 <TP_ReadDataBuffer+0xbc>)
 8001914:	f001 fef4 	bl	8003700 <HAL_I2C_Master_Receive>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <TP_ReadDataBuffer+0x7e>
 800191e:	23aa      	movs	r3, #170	@ 0xaa
 8001920:	e019      	b.n	8001956 <TP_ReadDataBuffer+0xb2>
	if (HAL_I2C_Master_Receive(&hi2c3, Address, &TP_BufferRX[0], 1, 1000) != HAL_OK) {   return 0xAA; }
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	b299      	uxth	r1, r3
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2301      	movs	r3, #1
 8001932:	480b      	ldr	r0, [pc, #44]	@ (8001960 <TP_ReadDataBuffer+0xbc>)
 8001934:	f001 fee4 	bl	8003700 <HAL_I2C_Master_Receive>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <TP_ReadDataBuffer+0x9e>
 800193e:	23aa      	movs	r3, #170	@ 0xaa
 8001940:	e009      	b.n	8001956 <TP_ReadDataBuffer+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 8001942:	b662      	cpsie	i
}
 8001944:	bf00      	nop
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Current);
*/

  // return the data
  return ((uint16_t) TP_BufferRX[0] | ((uint16_t)TP_BufferRX[1]<< 8));
 8001946:	7b3b      	ldrb	r3, [r7, #12]
 8001948:	b21a      	sxth	r2, r3
 800194a:	7b7b      	ldrb	r3, [r7, #13]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	b29b      	uxth	r3, r3
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000040 	.word	0x20000040

08001964 <HAL_TIM_PeriodElapsedCallback>:
uint16_t Y_nave=120, Y_nave_ant=120, vel=500;			//Valores de nave
uint16_t Y_enemy=15, Y_enemy_ant=16, dir_enemy=0;		//Valores de enemigo
int16_t LaserX, LaserY,LaserX_ant, LaserY_ant, Laser_ON;//Valores del laser
uint16_t dir=0, win=5;									//Dirección y vidas de enemigo
//TP_STATE TP_StateOK;/*------------- INTERRUPCION DEL TIMER 3 -------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	af02      	add	r7, sp, #8
 800196a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOG, LED_GREEN_Pin);
 800196c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001970:	488c      	ldr	r0, [pc, #560]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001972:	f001 fc44 	bl	80031fe <HAL_GPIO_TogglePin>
	if(win!=0){ //Si el enemigo todavia tiene vidas...
 8001976:	4b8c      	ldr	r3, [pc, #560]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 81c1 	beq.w	8001d02 <HAL_TIM_PeriodElapsedCallback+0x39e>
		if(dir_enemy == 0){	//Si va para abajo...
 8001980:	4b8a      	ldr	r3, [pc, #552]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 8085 	bne.w	8001a94 <HAL_TIM_PeriodElapsedCallback+0x130>
			if(Y_enemy_ant < 225){
 800198a:	4b89      	ldr	r3, [pc, #548]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	2be0      	cmp	r3, #224	@ 0xe0
 8001990:	d87d      	bhi.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x12a>
				Y_enemy = Y_enemy + 1; //Baja 1
 8001992:	4b88      	ldr	r3, [pc, #544]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b86      	ldr	r3, [pc, #536]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800199c:	801a      	strh	r2, [r3, #0]
				//Borra nave enemiga
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy_ant-15, 20, Y_enemy_ant-5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 800199e:	4b84      	ldr	r3, [pc, #528]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	3b0f      	subs	r3, #15
 80019a4:	b299      	uxth	r1, r3
 80019a6:	4b82      	ldr	r3, [pc, #520]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	3b05      	subs	r3, #5
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4a82      	ldr	r2, [pc, #520]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80019b0:	9201      	str	r2, [sp, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	9200      	str	r2, [sp, #0]
 80019b6:	2214      	movs	r2, #20
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fd2f 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(10, Y_enemy_ant-5, 30, Y_enemy_ant+5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 80019be:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	3b05      	subs	r3, #5
 80019c4:	b299      	uxth	r1, r3
 80019c6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	3305      	adds	r3, #5
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4a7a      	ldr	r2, [pc, #488]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80019d0:	9201      	str	r2, [sp, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	9200      	str	r2, [sp, #0]
 80019d6:	221e      	movs	r2, #30
 80019d8:	200a      	movs	r0, #10
 80019da:	f7ff fd1f 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy_ant+5, 20, Y_enemy_ant+15, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 80019de:	4b74      	ldr	r3, [pc, #464]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	3305      	adds	r3, #5
 80019e4:	b299      	uxth	r1, r3
 80019e6:	4b72      	ldr	r3, [pc, #456]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	330f      	adds	r3, #15
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4a72      	ldr	r2, [pc, #456]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80019f0:	9201      	str	r2, [sp, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	9200      	str	r2, [sp, #0]
 80019f6:	2214      	movs	r2, #20
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff fd0f 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				//Pinta nueva nave enemiga
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy-15, 20, Y_enemy-5, ILI9341_COLOR_RED, (uint32_t*)frame_buffer); //dibujar nuevo
 80019fe:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	3b0f      	subs	r3, #15
 8001a04:	b299      	uxth	r1, r3
 8001a06:	4b6b      	ldr	r3, [pc, #428]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	3b05      	subs	r3, #5
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	2214      	movs	r2, #20
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fcfe 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(10, Y_enemy-5, 30, Y_enemy+5, ILI9341_COLOR_RED, (uint32_t*)frame_buffer); //dibujar nuevo
 8001a20:	4b64      	ldr	r3, [pc, #400]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	3b05      	subs	r3, #5
 8001a26:	b299      	uxth	r1, r3
 8001a28:	4b62      	ldr	r3, [pc, #392]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	3305      	adds	r3, #5
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4a61      	ldr	r2, [pc, #388]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a32:	9201      	str	r2, [sp, #4]
 8001a34:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	221e      	movs	r2, #30
 8001a3c:	200a      	movs	r0, #10
 8001a3e:	f7ff fced 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy-5, 10,Y_enemy+5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001a42:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	3b05      	subs	r3, #5
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	3305      	adds	r3, #5
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4a59      	ldr	r2, [pc, #356]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a54:	9201      	str	r2, [sp, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	9200      	str	r2, [sp, #0]
 8001a5a:	220a      	movs	r2, #10
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fcdd 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy+5, 20, Y_enemy+15, ILI9341_COLOR_RED, (uint32_t*)frame_buffer); //dibujar nuevo
 8001a62:	4b54      	ldr	r3, [pc, #336]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	3305      	adds	r3, #5
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	4b52      	ldr	r3, [pc, #328]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	330f      	adds	r3, #15
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4a51      	ldr	r2, [pc, #324]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a74:	9201      	str	r2, [sp, #4]
 8001a76:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	2214      	movs	r2, #20
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fccc 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				Y_enemy_ant = Y_enemy;
 8001a84:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a86:	881a      	ldrh	r2, [r3, #0]
 8001a88:	4b49      	ldr	r3, [pc, #292]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a8a:	801a      	strh	r2, [r3, #0]
 8001a8c:	e002      	b.n	8001a94 <HAL_TIM_PeriodElapsedCallback+0x130>

			}
			else{dir_enemy=1;} //Llegó al fondo, ahora va para arriba
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	801a      	strh	r2, [r3, #0]
		}
		if(dir_enemy == 1){ //Si va para arriba...
 8001a94:	4b45      	ldr	r3, [pc, #276]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	f040 8092 	bne.w	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x25e>
			if(Y_enemy_ant > 15){
 8001a9e:	4b44      	ldr	r3, [pc, #272]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	f240 808a 	bls.w	8001bbc <HAL_TIM_PeriodElapsedCallback+0x258>
				Y_enemy = Y_enemy - 1; //Sube 1
 8001aa8:	4b42      	ldr	r3, [pc, #264]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b40      	ldr	r3, [pc, #256]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ab2:	801a      	strh	r2, [r3, #0]
				//Borra nave enemiga
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy_ant-15, 20, Y_enemy_ant-5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	3b0f      	subs	r3, #15
 8001aba:	b299      	uxth	r1, r3
 8001abc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	3b05      	subs	r3, #5
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ac6:	9201      	str	r2, [sp, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	9200      	str	r2, [sp, #0]
 8001acc:	2214      	movs	r2, #20
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fca4 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(10, Y_enemy_ant-5, 30, Y_enemy_ant+5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001ad4:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	b299      	uxth	r1, r3
 8001adc:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	3305      	adds	r3, #5
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4a34      	ldr	r2, [pc, #208]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	9200      	str	r2, [sp, #0]
 8001aec:	221e      	movs	r2, #30
 8001aee:	200a      	movs	r0, #10
 8001af0:	f7ff fc94 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy_ant+5, 20, Y_enemy_ant+15, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001af4:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	3305      	adds	r3, #5
 8001afa:	b299      	uxth	r1, r3
 8001afc:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	330f      	adds	r3, #15
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001b06:	9201      	str	r2, [sp, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	9200      	str	r2, [sp, #0]
 8001b0c:	2214      	movs	r2, #20
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fc84 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				//Pinta nueva nave
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy-15, 20, Y_enemy-5, ILI9341_COLOR_RED, (uint32_t*)frame_buffer); //dibujar nuevo
 8001b14:	4b27      	ldr	r3, [pc, #156]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	3b0f      	subs	r3, #15
 8001b1a:	b299      	uxth	r1, r3
 8001b1c:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	3b05      	subs	r3, #5
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001b26:	9201      	str	r2, [sp, #4]
 8001b28:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001b2c:	9200      	str	r2, [sp, #0]
 8001b2e:	2214      	movs	r2, #20
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fc73 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(10, Y_enemy-5, 30, Y_enemy+5, ILI9341_COLOR_RED, (uint32_t*)frame_buffer); //dibujar nuevo
 8001b36:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	3b05      	subs	r3, #5
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	3305      	adds	r3, #5
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001b48:	9201      	str	r2, [sp, #4]
 8001b4a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	221e      	movs	r2, #30
 8001b52:	200a      	movs	r0, #10
 8001b54:	f7ff fc62 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy-5, 10,Y_enemy+5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	3b05      	subs	r3, #5
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	3305      	adds	r3, #5
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4a13      	ldr	r2, [pc, #76]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001b6a:	9201      	str	r2, [sp, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	220a      	movs	r2, #10
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff fc52 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, Y_enemy+5, 20, Y_enemy+15, ILI9341_COLOR_RED, (uint32_t*)frame_buffer); //dibujar nuevo
 8001b78:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	3305      	adds	r3, #5
 8001b7e:	b299      	uxth	r1, r3
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	330f      	adds	r3, #15
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001b8a:	9201      	str	r2, [sp, #4]
 8001b8c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001b90:	9200      	str	r2, [sp, #0]
 8001b92:	2214      	movs	r2, #20
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff fc41 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				Y_enemy_ant = Y_enemy;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	e00e      	b.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x25e>
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	20000014 	.word	0x20000014
 8001bac:	200259b4 	.word	0x200259b4
 8001bb0:	20000012 	.word	0x20000012
 8001bb4:	20000010 	.word	0x20000010
 8001bb8:	200001ac 	.word	0x200001ac

			}
			else{dir_enemy=0;} //Llegó al tope, va para abajo
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	801a      	strh	r2, [r3, #0]
		}

		if(Laser_ON == 1){ //Si se picó al botón..
 8001bc2:	4b53      	ldr	r3, [pc, #332]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	f040 809a 	bne.w	8001d02 <HAL_TIM_PeriodElapsedCallback+0x39e>
			LaserX = LaserX-1;	//El laser avanza a la izquierda...
 8001bce:	4b51      	ldr	r3, [pc, #324]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001bde:	801a      	strh	r2, [r3, #0]
			if (LaserX>1){		//Cuando no ha llegado al borde...
 8001be0:	4b4c      	ldr	r3, [pc, #304]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	dd74      	ble.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x370>
				//Borrar y pintar nuevo laser
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(LaserX_ant, LaserY-5, LaserX_ant+20,LaserY+5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer);
 8001bea:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	b298      	uxth	r0, r3
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b05      	subs	r3, #5
 8001bfc:	b299      	uxth	r1, r3
 8001bfe:	4b46      	ldr	r3, [pc, #280]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3314      	adds	r3, #20
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b44      	ldr	r3, [pc, #272]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3305      	adds	r3, #5
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4c42      	ldr	r4, [pc, #264]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001c18:	9401      	str	r4, [sp, #4]
 8001c1a:	2400      	movs	r4, #0
 8001c1c:	9400      	str	r4, [sp, #0]
 8001c1e:	f7ff fbfd 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(LaserX, LaserY-5, LaserX+20,LaserY+5, ILI9341_COLOR_YELLOW, (uint32_t*)frame_buffer);
 8001c22:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	b298      	uxth	r0, r3
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b05      	subs	r3, #5
 8001c34:	b299      	uxth	r1, r3
 8001c36:	4b37      	ldr	r3, [pc, #220]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3314      	adds	r3, #20
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b36      	ldr	r3, [pc, #216]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3305      	adds	r3, #5
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4c34      	ldr	r4, [pc, #208]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001c50:	9401      	str	r4, [sp, #4]
 8001c52:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001c56:	9400      	str	r4, [sp, #0]
 8001c58:	f7ff fbe0 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				LaserX_ant=LaserX;
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001c5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c62:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001c64:	801a      	strh	r2, [r3, #0]
				//Si el laser llega al enemigo y están en coordenadas parecidas...
				if(LaserX==15 && LaserY>Y_enemy-20 && LaserY<Y_enemy+20){
 8001c66:	4b2b      	ldr	r3, [pc, #172]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d148      	bne.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x39e>
 8001c70:	4b2c      	ldr	r3, [pc, #176]	@ (8001d24 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	3b13      	subs	r3, #19
 8001c76:	4a29      	ldr	r2, [pc, #164]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001c78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	dc40      	bgt.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x39e>
 8001c80:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	3313      	adds	r3, #19
 8001c86:	4a25      	ldr	r2, [pc, #148]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001c88:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	db38      	blt.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x39e>
					win=win-1;	//Se quita una vida
 8001c90:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001c9a:	801a      	strh	r2, [r3, #0]
					//Se borra un cuadro de vida
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(285-50*(5-win), 0, 285-1, 14, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer);
 8001c9c:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	f1c3 0305 	rsb	r3, r3, #5
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	0292      	lsls	r2, r2, #10
 8001caa:	1ad2      	subs	r2, r2, r3
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	441a      	add	r2, r3
 8001cb0:	00d2      	lsls	r2, r2, #3
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	f203 131d 	addw	r3, r3, #285	@ 0x11d
 8001cbc:	b298      	uxth	r0, r3
 8001cbe:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	230e      	movs	r3, #14
 8001cc8:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 8001ccc:	2100      	movs	r1, #0
 8001cce:	f7ff fba5 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				Laser_ON=0;
			}
		}
	}
	else{}
}
 8001cd2:	e016      	b.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x39e>
				LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, LaserY-5, 21, LaserY+5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer);
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3b05      	subs	r3, #5
 8001cde:	b299      	uxth	r1, r3
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3305      	adds	r3, #5
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4a0c      	ldr	r2, [pc, #48]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001cee:	9201      	str	r2, [sp, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	9200      	str	r2, [sp, #0]
 8001cf4:	2215      	movs	r2, #21
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff fb90 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
				Laser_ON=0;
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	801a      	strh	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200259b4 	.word	0x200259b4
 8001d10:	200259bc 	.word	0x200259bc
 8001d14:	200259b6 	.word	0x200259b6
 8001d18:	200259ba 	.word	0x200259ba
 8001d1c:	200259b8 	.word	0x200259b8
 8001d20:	200001ac 	.word	0x200001ac
 8001d24:	20000010 	.word	0x20000010
 8001d28:	20000014 	.word	0x20000014

08001d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d32:	f000 fe0f 	bl	8002954 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d36:	f000 fa5b 	bl	80021f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3a:	f000 fb8d 	bl	8002458 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001d3e:	f000 fac7 	bl	80022d0 <MX_I2C3_Init>
  MX_SPI5_Init();
 8001d42:	f000 fb05 	bl	8002350 <MX_SPI5_Init>
  MX_TIM3_Init();
 8001d46:	f000 fb39 	bl	80023bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOG, LED_RED_Pin, GPIO_PIN_RESET); //LED1 apagado
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d50:	4816      	ldr	r0, [pc, #88]	@ (8001dac <main+0x80>)
 8001d52:	f001 fa3b 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin, GPIO_PIN_RESET); //LED2 apagado
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d5c:	4813      	ldr	r0, [pc, #76]	@ (8001dac <main+0x80>)
 8001d5e:	f001 fa35 	bl	80031cc <HAL_GPIO_WritePin>
	LCD_ILI9341_Init(&hspi5); //inicializar LCD
 8001d62:	4813      	ldr	r0, [pc, #76]	@ (8001db0 <main+0x84>)
 8001d64:	f7fe fbba 	bl	80004dc <LCD_ILI9341_Init>
	LCD_ILI9341_Rotate(LCD_ILI9341_Orientation_Landscape_2);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f7fe fdc1 	bl	80008f0 <LCD_ILI9341_Rotate>
	if (TP_Config() != 0){ //Inicializar Touch, ERROR?
 8001d6e:	f7ff fb7d 	bl	800146c <TP_Config>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <main+0x94>
		LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0,0,320,240, ILI9341_COLOR_WHITE,(uint32_t*)frame_buffer);
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <main+0x88>)
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	23f0      	movs	r3, #240	@ 0xf0
 8001d84:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fb46 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
		LCD_ILI9341_Puts_ImageBuffer(10, 10, "ID o CONFIGURACION ERROR", &LCD_Font_7x10,ILI9341_COLOR_RED, (uint32_t*)frame_buffer);
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <main+0x88>)
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <main+0x8c>)
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <main+0x90>)
 8001d9e:	210a      	movs	r1, #10
 8001da0:	200a      	movs	r0, #10
 8001da2:	f7ff fa31 	bl	8001208 <LCD_ILI9341_Puts_ImageBuffer>
		//LCD_ILI9341_Puts(10, 40, "ID o CONFIGURACION ERROR", &LCD_Font_7x10, ILI9341_COLOR_RED,ILI9341_COLOR_BLACK);
		while(1){}
 8001da6:	bf00      	nop
 8001da8:	e7fd      	b.n	8001da6 <main+0x7a>
 8001daa:	bf00      	nop
 8001dac:	40021800 	.word	0x40021800
 8001db0:	20000094 	.word	0x20000094
 8001db4:	200001ac 	.word	0x200001ac
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	08005b44 	.word	0x08005b44
	}
	/////////////////////////////////Preparaciones//////////////////////////////////////
	//Pintar fondo, botón y barra de vida
	LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0,0,320,240, ILI9341_COLOR_BLACK,(uint32_t*)frame_buffer);
 8001dc0:	4ba9      	ldr	r3, [pc, #676]	@ (8002068 <main+0x33c>)
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	23f0      	movs	r3, #240	@ 0xf0
 8001dca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff fb23 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
	LCD_ILI9341_DrawFilledRectangle_ImageBuffer(140,220,180,240, ILI9341_COLOR_WHITE,(uint32_t*)frame_buffer);
 8001dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8002068 <main+0x33c>)
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	23f0      	movs	r3, #240	@ 0xf0
 8001de2:	22b4      	movs	r2, #180	@ 0xb4
 8001de4:	21dc      	movs	r1, #220	@ 0xdc
 8001de6:	208c      	movs	r0, #140	@ 0x8c
 8001de8:	f7ff fb18 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
	LCD_ILI9341_DrawFilledRectangle_ImageBuffer(35,0,285,15, ILI9341_COLOR_RED,(uint32_t*)frame_buffer);
 8001dec:	4b9e      	ldr	r3, [pc, #632]	@ (8002068 <main+0x33c>)
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	230f      	movs	r3, #15
 8001df8:	f240 121d 	movw	r2, #285	@ 0x11d
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2023      	movs	r0, #35	@ 0x23
 8001e00:	f7ff fb0c 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
	//Pintar nave de personaje
	LCD_ILI9341_DrawFilledRectangle_ImageBuffer(310, Y_nave-25, 320,Y_nave-15, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 8001e04:	4b99      	ldr	r3, [pc, #612]	@ (800206c <main+0x340>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	3b19      	subs	r3, #25
 8001e0a:	b299      	uxth	r1, r3
 8001e0c:	4b97      	ldr	r3, [pc, #604]	@ (800206c <main+0x340>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	3b0f      	subs	r3, #15
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4a94      	ldr	r2, [pc, #592]	@ (8002068 <main+0x33c>)
 8001e16:	9201      	str	r2, [sp, #4]
 8001e18:	221f      	movs	r2, #31
 8001e1a:	9200      	str	r2, [sp, #0]
 8001e1c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e20:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001e24:	f7ff fafa 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
	LCD_ILI9341_DrawFilledRectangle_ImageBuffer(300, Y_nave-15, 320,Y_nave-5, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 8001e28:	4b90      	ldr	r3, [pc, #576]	@ (800206c <main+0x340>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	3b0f      	subs	r3, #15
 8001e2e:	b299      	uxth	r1, r3
 8001e30:	4b8e      	ldr	r3, [pc, #568]	@ (800206c <main+0x340>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	3b05      	subs	r3, #5
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4a8b      	ldr	r2, [pc, #556]	@ (8002068 <main+0x33c>)
 8001e3a:	9201      	str	r2, [sp, #4]
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	9200      	str	r2, [sp, #0]
 8001e40:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e44:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e48:	f7ff fae8 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
	LCD_ILI9341_DrawFilledRectangle_ImageBuffer(290, Y_nave-5, 310,Y_nave+5, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 8001e4c:	4b87      	ldr	r3, [pc, #540]	@ (800206c <main+0x340>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	3b05      	subs	r3, #5
 8001e52:	b299      	uxth	r1, r3
 8001e54:	4b85      	ldr	r3, [pc, #532]	@ (800206c <main+0x340>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	3305      	adds	r3, #5
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4a82      	ldr	r2, [pc, #520]	@ (8002068 <main+0x33c>)
 8001e5e:	9201      	str	r2, [sp, #4]
 8001e60:	221f      	movs	r2, #31
 8001e62:	9200      	str	r2, [sp, #0]
 8001e64:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8001e68:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8001e6c:	f7ff fad6 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
	LCD_ILI9341_DrawFilledRectangle_ImageBuffer(300, Y_nave+5, 320,Y_nave+15, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 8001e70:	4b7e      	ldr	r3, [pc, #504]	@ (800206c <main+0x340>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	3305      	adds	r3, #5
 8001e76:	b299      	uxth	r1, r3
 8001e78:	4b7c      	ldr	r3, [pc, #496]	@ (800206c <main+0x340>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	330f      	adds	r3, #15
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4a79      	ldr	r2, [pc, #484]	@ (8002068 <main+0x33c>)
 8001e82:	9201      	str	r2, [sp, #4]
 8001e84:	221f      	movs	r2, #31
 8001e86:	9200      	str	r2, [sp, #0]
 8001e88:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e8c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e90:	f7ff fac4 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
	LCD_ILI9341_DrawFilledRectangle_ImageBuffer(310, Y_nave+15, 320,Y_nave+25, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 8001e94:	4b75      	ldr	r3, [pc, #468]	@ (800206c <main+0x340>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	330f      	adds	r3, #15
 8001e9a:	b299      	uxth	r1, r3
 8001e9c:	4b73      	ldr	r3, [pc, #460]	@ (800206c <main+0x340>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	3319      	adds	r3, #25
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4a70      	ldr	r2, [pc, #448]	@ (8002068 <main+0x33c>)
 8001ea6:	9201      	str	r2, [sp, #4]
 8001ea8:	221f      	movs	r2, #31
 8001eaa:	9200      	str	r2, [sp, #0]
 8001eac:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001eb0:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001eb4:	f7ff fab2 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>

	LCD_ILI9341_DisplayImage((uint32_t*)frame_buffer);
 8001eb8:	486b      	ldr	r0, [pc, #428]	@ (8002068 <main+0x33c>)
 8001eba:	f7fe fd83 	bl	80009c4 <LCD_ILI9341_DisplayImage>
	HAL_TIM_Base_Start_IT(&htim3);//inicializa interrupciones de overflow del timer3
 8001ebe:	486c      	ldr	r0, [pc, #432]	@ (8002070 <main+0x344>)
 8001ec0:	f003 f9c8 	bl	8005254 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1){
		TP_GetState();
 8001ec4:	f7ff fb3e 	bl	8001544 <TP_GetState>
		//>1 para evitar falsas lecturas del touch
		if((TP_State.TouchDetected)&&(TP_State.X<239)&&(TP_State.Y>1)){
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8002074 <main+0x348>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 812e 	beq.w	800212e <main+0x402>
 8001ed2:	4b68      	ldr	r3, [pc, #416]	@ (8002074 <main+0x348>)
 8001ed4:	885b      	ldrh	r3, [r3, #2]
 8001ed6:	2bee      	cmp	r3, #238	@ 0xee
 8001ed8:	f200 8129 	bhi.w	800212e <main+0x402>
 8001edc:	4b65      	ldr	r3, [pc, #404]	@ (8002074 <main+0x348>)
 8001ede:	889b      	ldrh	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	f240 8124 	bls.w	800212e <main+0x402>
			TP_X=TP_State.Y;//Coordenada del touch en X Porque el display esta girado
 8001ee6:	4b63      	ldr	r3, [pc, #396]	@ (8002074 <main+0x348>)
 8001ee8:	889a      	ldrh	r2, [r3, #4]
 8001eea:	4b63      	ldr	r3, [pc, #396]	@ (8002078 <main+0x34c>)
 8001eec:	801a      	strh	r2, [r3, #0]
			TP_Y=240-TP_State.X; //Coordenada del touch en Y
 8001eee:	4b61      	ldr	r3, [pc, #388]	@ (8002074 <main+0x348>)
 8001ef0:	885b      	ldrh	r3, [r3, #2]
 8001ef2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b60      	ldr	r3, [pc, #384]	@ (800207c <main+0x350>)
 8001efa:	801a      	strh	r2, [r3, #0]
			//Dibujar posicion del touch
			//LCD_ILI9341_DrawLine_ImageBuffer(Xant-10, Yant, Xant+10, Yant,ILI9341_COLOR_GREEN2, (uint32_t*)frame_buffer);
			//LCD_ILI9341_DrawLine_ImageBuffer(Xant, Yant-10, Xant, Yant+10,ILI9341_COLOR_GREEN2, (uint32_t*)frame_buffer);
			//LCD_ILI9341_DrawLine_ImageBuffer(TP_X-10, TP_Y, TP_X+10, TP_Y,ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer);
			//LCD_ILI9341_DrawLine_ImageBuffer(TP_X, TP_Y-10, TP_X, TP_Y+10,ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer);
			if(TP_X>200){
 8001efc:	4b5e      	ldr	r3, [pc, #376]	@ (8002078 <main+0x34c>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	2bc8      	cmp	r3, #200	@ 0xc8
 8001f02:	f240 80e7 	bls.w	80020d4 <main+0x3a8>
				if((TP_Y>25)&&(TP_Y<215)){
 8001f06:	4b5d      	ldr	r3, [pc, #372]	@ (800207c <main+0x350>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	2b19      	cmp	r3, #25
 8001f0c:	f240 80e2 	bls.w	80020d4 <main+0x3a8>
 8001f10:	4b5a      	ldr	r3, [pc, #360]	@ (800207c <main+0x350>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2bd6      	cmp	r3, #214	@ 0xd6
 8001f16:	f200 80dd 	bhi.w	80020d4 <main+0x3a8>
					Y_nave=TP_Y;
 8001f1a:	4b58      	ldr	r3, [pc, #352]	@ (800207c <main+0x350>)
 8001f1c:	881a      	ldrh	r2, [r3, #0]
 8001f1e:	4b53      	ldr	r3, [pc, #332]	@ (800206c <main+0x340>)
 8001f20:	801a      	strh	r2, [r3, #0]
					//Borrar nave de jugador
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(310, Y_nave_ant-25, 320,Y_nave_ant-15, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001f22:	4b57      	ldr	r3, [pc, #348]	@ (8002080 <main+0x354>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	3b19      	subs	r3, #25
 8001f28:	b299      	uxth	r1, r3
 8001f2a:	4b55      	ldr	r3, [pc, #340]	@ (8002080 <main+0x354>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	3b0f      	subs	r3, #15
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4a4d      	ldr	r2, [pc, #308]	@ (8002068 <main+0x33c>)
 8001f34:	9201      	str	r2, [sp, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	9200      	str	r2, [sp, #0]
 8001f3a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f3e:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001f42:	f7ff fa6b 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(300, Y_nave_ant-15, 320,Y_nave_ant-5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001f46:	4b4e      	ldr	r3, [pc, #312]	@ (8002080 <main+0x354>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	3b0f      	subs	r3, #15
 8001f4c:	b299      	uxth	r1, r3
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002080 <main+0x354>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	3b05      	subs	r3, #5
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4a44      	ldr	r2, [pc, #272]	@ (8002068 <main+0x33c>)
 8001f58:	9201      	str	r2, [sp, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	9200      	str	r2, [sp, #0]
 8001f5e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f62:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f66:	f7ff fa59 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(290, Y_nave_ant-5, 310,Y_nave_ant+5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001f6a:	4b45      	ldr	r3, [pc, #276]	@ (8002080 <main+0x354>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	3b05      	subs	r3, #5
 8001f70:	b299      	uxth	r1, r3
 8001f72:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <main+0x354>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	3305      	adds	r3, #5
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <main+0x33c>)
 8001f7c:	9201      	str	r2, [sp, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	9200      	str	r2, [sp, #0]
 8001f82:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8001f86:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8001f8a:	f7ff fa47 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(300, Y_nave_ant+5, 320,Y_nave_ant+15, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <main+0x354>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	3305      	adds	r3, #5
 8001f94:	b299      	uxth	r1, r3
 8001f96:	4b3a      	ldr	r3, [pc, #232]	@ (8002080 <main+0x354>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	330f      	adds	r3, #15
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4a32      	ldr	r2, [pc, #200]	@ (8002068 <main+0x33c>)
 8001fa0:	9201      	str	r2, [sp, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	9200      	str	r2, [sp, #0]
 8001fa6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001faa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001fae:	f7ff fa35 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(310, Y_nave_ant+15, 320,Y_nave_ant+25, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8001fb2:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <main+0x354>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	330f      	adds	r3, #15
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <main+0x354>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	3319      	adds	r3, #25
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4a29      	ldr	r2, [pc, #164]	@ (8002068 <main+0x33c>)
 8001fc4:	9201      	str	r2, [sp, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	9200      	str	r2, [sp, #0]
 8001fca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001fce:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001fd2:	f7ff fa23 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					//Imprimir nueva nave de jugador
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(310, Y_nave-25, 320,Y_nave-15, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 8001fd6:	4b25      	ldr	r3, [pc, #148]	@ (800206c <main+0x340>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	3b19      	subs	r3, #25
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	4b23      	ldr	r3, [pc, #140]	@ (800206c <main+0x340>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	3b0f      	subs	r3, #15
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <main+0x33c>)
 8001fe8:	9201      	str	r2, [sp, #4]
 8001fea:	221f      	movs	r2, #31
 8001fec:	9200      	str	r2, [sp, #0]
 8001fee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ff2:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001ff6:	f7ff fa11 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(300, Y_nave-15, 320,Y_nave-5, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <main+0x340>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	3b0f      	subs	r3, #15
 8002000:	b299      	uxth	r1, r3
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <main+0x340>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	3b05      	subs	r3, #5
 8002008:	b29b      	uxth	r3, r3
 800200a:	4a17      	ldr	r2, [pc, #92]	@ (8002068 <main+0x33c>)
 800200c:	9201      	str	r2, [sp, #4]
 800200e:	221f      	movs	r2, #31
 8002010:	9200      	str	r2, [sp, #0]
 8002012:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002016:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800201a:	f7ff f9ff 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(290, Y_nave-5, 310,Y_nave+5, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 800201e:	4b13      	ldr	r3, [pc, #76]	@ (800206c <main+0x340>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	3b05      	subs	r3, #5
 8002024:	b299      	uxth	r1, r3
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <main+0x340>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	3305      	adds	r3, #5
 800202c:	b29b      	uxth	r3, r3
 800202e:	4a0e      	ldr	r2, [pc, #56]	@ (8002068 <main+0x33c>)
 8002030:	9201      	str	r2, [sp, #4]
 8002032:	221f      	movs	r2, #31
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	f44f 729b 	mov.w	r2, #310	@ 0x136
 800203a:	f44f 7091 	mov.w	r0, #290	@ 0x122
 800203e:	f7ff f9ed 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(310, Y_nave-5, 320,Y_nave+5, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer); //dibujar nuevo
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <main+0x340>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	3b05      	subs	r3, #5
 8002048:	b299      	uxth	r1, r3
 800204a:	4b08      	ldr	r3, [pc, #32]	@ (800206c <main+0x340>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	3305      	adds	r3, #5
 8002050:	b29b      	uxth	r3, r3
 8002052:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <main+0x33c>)
 8002054:	9201      	str	r2, [sp, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	9200      	str	r2, [sp, #0]
 800205a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800205e:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8002062:	f7ff f9db 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
 8002066:	e00d      	b.n	8002084 <main+0x358>
 8002068:	200001ac 	.word	0x200001ac
 800206c:	2000000c 	.word	0x2000000c
 8002070:	200000ec 	.word	0x200000ec
 8002074:	200001a4 	.word	0x200001a4
 8002078:	200259b0 	.word	0x200259b0
 800207c:	200259b2 	.word	0x200259b2
 8002080:	2000000e 	.word	0x2000000e
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(300, Y_nave+5, 320,Y_nave+15, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 8002084:	4b43      	ldr	r3, [pc, #268]	@ (8002194 <main+0x468>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	3305      	adds	r3, #5
 800208a:	b299      	uxth	r1, r3
 800208c:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <main+0x468>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	330f      	adds	r3, #15
 8002092:	b29b      	uxth	r3, r3
 8002094:	4a40      	ldr	r2, [pc, #256]	@ (8002198 <main+0x46c>)
 8002096:	9201      	str	r2, [sp, #4]
 8002098:	221f      	movs	r2, #31
 800209a:	9200      	str	r2, [sp, #0]
 800209c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80020a0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80020a4:	f7ff f9ba 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					LCD_ILI9341_DrawFilledRectangle_ImageBuffer(310, Y_nave+15, 320,Y_nave+25, ILI9341_COLOR_BLUE, (uint32_t*)frame_buffer); //dibujar nuevo
 80020a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002194 <main+0x468>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	330f      	adds	r3, #15
 80020ae:	b299      	uxth	r1, r3
 80020b0:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <main+0x468>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	3319      	adds	r3, #25
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4a37      	ldr	r2, [pc, #220]	@ (8002198 <main+0x46c>)
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	221f      	movs	r2, #31
 80020be:	9200      	str	r2, [sp, #0]
 80020c0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80020c4:	f44f 709b 	mov.w	r0, #310	@ 0x136
 80020c8:	f7ff f9a8 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
					Y_nave_ant=Y_nave;
 80020cc:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <main+0x468>)
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	4b32      	ldr	r3, [pc, #200]	@ (800219c <main+0x470>)
 80020d2:	801a      	strh	r2, [r3, #0]
				}
			}
			if((TP_X>140)&&(TP_X<180)&&(TP_Y>220)&&(TP_Y<240)){ //Presión del boton de disparo
 80020d4:	4b32      	ldr	r3, [pc, #200]	@ (80021a0 <main+0x474>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	2b8c      	cmp	r3, #140	@ 0x8c
 80020da:	d920      	bls.n	800211e <main+0x3f2>
 80020dc:	4b30      	ldr	r3, [pc, #192]	@ (80021a0 <main+0x474>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	2bb3      	cmp	r3, #179	@ 0xb3
 80020e2:	d81c      	bhi.n	800211e <main+0x3f2>
 80020e4:	4b2f      	ldr	r3, [pc, #188]	@ (80021a4 <main+0x478>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	2bdc      	cmp	r3, #220	@ 0xdc
 80020ea:	d918      	bls.n	800211e <main+0x3f2>
 80020ec:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <main+0x478>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	2bef      	cmp	r3, #239	@ 0xef
 80020f2:	d814      	bhi.n	800211e <main+0x3f2>
				Laser_ON=1;
 80020f4:	4b2c      	ldr	r3, [pc, #176]	@ (80021a8 <main+0x47c>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	801a      	strh	r2, [r3, #0]
				LaserY = Y_nave_ant;	//Captura eje Y para el laser
 80020fa:	4b28      	ldr	r3, [pc, #160]	@ (800219c <main+0x470>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b21a      	sxth	r2, r3
 8002100:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <main+0x480>)
 8002102:	801a      	strh	r2, [r3, #0]
				LaserX = 280;			//Desde jugador...
 8002104:	4b2a      	ldr	r3, [pc, #168]	@ (80021b0 <main+0x484>)
 8002106:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800210a:	801a      	strh	r2, [r3, #0]
				LaserX_ant=LaserX+1;
 800210c:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <main+0x484>)
 800210e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002112:	b29b      	uxth	r3, r3
 8002114:	3301      	adds	r3, #1
 8002116:	b29b      	uxth	r3, r3
 8002118:	b21a      	sxth	r2, r3
 800211a:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <main+0x488>)
 800211c:	801a      	strh	r2, [r3, #0]
			}

			Xant=TP_X;
 800211e:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <main+0x474>)
 8002120:	881a      	ldrh	r2, [r3, #0]
 8002122:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <main+0x48c>)
 8002124:	801a      	strh	r2, [r3, #0]
			Yant=TP_Y;
 8002126:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <main+0x478>)
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <main+0x490>)
 800212c:	801a      	strh	r2, [r3, #0]

		}
		if(win==0){ //Si acabaste con el enemigo...
 800212e:	4b24      	ldr	r3, [pc, #144]	@ (80021c0 <main+0x494>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d129      	bne.n	800218a <main+0x45e>
			//Borrar enemigo e imprimir mensaje de victoria
			LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, 0, 30, 30, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer);
 8002136:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <main+0x46c>)
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	231e      	movs	r3, #30
 8002140:	221e      	movs	r2, #30
 8002142:	2100      	movs	r1, #0
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff f969 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
			LCD_ILI9341_DrawFilledRectangle_ImageBuffer(0, 16, 140, 220, ILI9341_COLOR_BLACK, (uint32_t*)frame_buffer);
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <main+0x46c>)
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	23dc      	movs	r3, #220	@ 0xdc
 8002154:	228c      	movs	r2, #140	@ 0x8c
 8002156:	2110      	movs	r1, #16
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff f95f 	bl	800141c <LCD_ILI9341_DrawFilledRectangle_ImageBuffer>
			LCD_ILI9341_DisplayImage((uint32_t*)frame_buffer);
 800215e:	480e      	ldr	r0, [pc, #56]	@ (8002198 <main+0x46c>)
 8002160:	f7fe fc30 	bl	80009c4 <LCD_ILI9341_DisplayImage>
			delayx(5);
 8002164:	2005      	movs	r0, #5
 8002166:	f000 f831 	bl	80021cc <delayx>
			LCD_ILI9341_Puts_ImageBuffer(138 , 120, "YOU WIN", &LCD_Font_7x10,ILI9341_COLOR_GREEN, (uint32_t*)frame_buffer);
 800216a:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <main+0x46c>)
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <main+0x498>)
 8002176:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <main+0x49c>)
 8002178:	2178      	movs	r1, #120	@ 0x78
 800217a:	208a      	movs	r0, #138	@ 0x8a
 800217c:	f7ff f844 	bl	8001208 <LCD_ILI9341_Puts_ImageBuffer>
			LCD_ILI9341_DisplayImage((uint32_t*)frame_buffer);
 8002180:	4805      	ldr	r0, [pc, #20]	@ (8002198 <main+0x46c>)
 8002182:	f7fe fc1f 	bl	80009c4 <LCD_ILI9341_DisplayImage>
			while(1){}	//Fin del juego
 8002186:	bf00      	nop
 8002188:	e7fd      	b.n	8002186 <main+0x45a>
		}
		LCD_ILI9341_DisplayImage((uint32_t*)frame_buffer);
 800218a:	4803      	ldr	r0, [pc, #12]	@ (8002198 <main+0x46c>)
 800218c:	f7fe fc1a 	bl	80009c4 <LCD_ILI9341_DisplayImage>
		TP_GetState();
 8002190:	e698      	b.n	8001ec4 <main+0x198>
 8002192:	bf00      	nop
 8002194:	2000000c 	.word	0x2000000c
 8002198:	200001ac 	.word	0x200001ac
 800219c:	2000000e 	.word	0x2000000e
 80021a0:	200259b0 	.word	0x200259b0
 80021a4:	200259b2 	.word	0x200259b2
 80021a8:	200259bc 	.word	0x200259bc
 80021ac:	200259b8 	.word	0x200259b8
 80021b0:	200259b6 	.word	0x200259b6
 80021b4:	200259ba 	.word	0x200259ba
 80021b8:	200259ac 	.word	0x200259ac
 80021bc:	200259ae 	.word	0x200259ae
 80021c0:	20000014 	.word	0x20000014
 80021c4:	20000000 	.word	0x20000000
 80021c8:	08005b60 	.word	0x08005b60

080021cc <delayx>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void delayx(uint32_t nTime) {while(nTime--);}
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	bf00      	nop
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1fa      	bne.n	80021d6 <delayx+0xa>
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	@ 0x50
 80021f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f6:	f107 0320 	add.w	r3, r7, #32
 80021fa:	2230      	movs	r2, #48	@ 0x30
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fc5a 	bl	8005ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <SystemClock_Config+0xd8>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	4a2a      	ldr	r2, [pc, #168]	@ (80022c8 <SystemClock_Config+0xd8>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	@ 0x40
 8002224:	4b28      	ldr	r3, [pc, #160]	@ (80022c8 <SystemClock_Config+0xd8>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <SystemClock_Config+0xdc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a24      	ldr	r2, [pc, #144]	@ (80022cc <SystemClock_Config+0xdc>)
 800223a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <SystemClock_Config+0xdc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800224c:	2301      	movs	r3, #1
 800224e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002250:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002256:	2302      	movs	r3, #2
 8002258:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800225a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800225e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002260:	2304      	movs	r3, #4
 8002262:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002264:	23b4      	movs	r3, #180	@ 0xb4
 8002266:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002268:	2302      	movs	r3, #2
 800226a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800226c:	2304      	movs	r3, #4
 800226e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	4618      	mov	r0, r3
 8002276:	f002 f861 	bl	800433c <HAL_RCC_OscConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002280:	f000 f9c6 	bl	8002610 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002284:	f002 f80a 	bl	800429c <HAL_PWREx_EnableOverDrive>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800228e:	f000 f9bf 	bl	8002610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002292:	230f      	movs	r3, #15
 8002294:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002296:	2302      	movs	r3, #2
 8002298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800229e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	2105      	movs	r1, #5
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fabb 	bl	800482c <HAL_RCC_ClockConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80022bc:	f000 f9a8 	bl	8002610 <Error_Handler>
  }
}
 80022c0:	bf00      	nop
 80022c2:	3750      	adds	r7, #80	@ 0x50
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40007000 	.word	0x40007000

080022d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <MX_I2C3_Init+0x74>)
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <MX_I2C3_Init+0x78>)
 80022d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80022da:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <MX_I2C3_Init+0x74>)
 80022dc:	4a1b      	ldr	r2, [pc, #108]	@ (800234c <MX_I2C3_Init+0x7c>)
 80022de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e0:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <MX_I2C3_Init+0x74>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <MX_I2C3_Init+0x74>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022ec:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <MX_I2C3_Init+0x74>)
 80022ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <MX_I2C3_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80022fa:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <MX_I2C3_Init+0x74>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002300:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <MX_I2C3_Init+0x74>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002306:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <MX_I2C3_Init+0x74>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800230c:	480d      	ldr	r0, [pc, #52]	@ (8002344 <MX_I2C3_Init+0x74>)
 800230e:	f000 ffb5 	bl	800327c <HAL_I2C_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002318:	f000 f97a 	bl	8002610 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800231c:	2100      	movs	r1, #0
 800231e:	4809      	ldr	r0, [pc, #36]	@ (8002344 <MX_I2C3_Init+0x74>)
 8002320:	f001 ff41 	bl	80041a6 <HAL_I2CEx_ConfigAnalogFilter>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800232a:	f000 f971 	bl	8002610 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800232e:	2100      	movs	r1, #0
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <MX_I2C3_Init+0x74>)
 8002332:	f001 ff74 	bl	800421e <HAL_I2CEx_ConfigDigitalFilter>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800233c:	f000 f968 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000040 	.word	0x20000040
 8002348:	40005c00 	.word	0x40005c00
 800234c:	000186a0 	.word	0x000186a0

08002350 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002354:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <MX_SPI5_Init+0x64>)
 8002356:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <MX_SPI5_Init+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800235a:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <MX_SPI5_Init+0x64>)
 800235c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002360:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <MX_SPI5_Init+0x64>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <MX_SPI5_Init+0x64>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <MX_SPI5_Init+0x64>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002374:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <MX_SPI5_Init+0x64>)
 8002376:	2200      	movs	r2, #0
 8002378:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <MX_SPI5_Init+0x64>)
 800237c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002380:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002382:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <MX_SPI5_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002388:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <MX_SPI5_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <MX_SPI5_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002394:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <MX_SPI5_Init+0x64>)
 8002396:	2200      	movs	r2, #0
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <MX_SPI5_Init+0x64>)
 800239c:	220a      	movs	r2, #10
 800239e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80023a0:	4804      	ldr	r0, [pc, #16]	@ (80023b4 <MX_SPI5_Init+0x64>)
 80023a2:	f002 fc4f 	bl	8004c44 <HAL_SPI_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80023ac:	f000 f930 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000094 	.word	0x20000094
 80023b8:	40015000 	.word	0x40015000

080023bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d0:	463b      	mov	r3, r7
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <MX_TIM3_Init+0x94>)
 80023da:	4a1e      	ldr	r2, [pc, #120]	@ (8002454 <MX_TIM3_Init+0x98>)
 80023dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80023de:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <MX_TIM3_Init+0x94>)
 80023e0:	2263      	movs	r2, #99	@ 0x63
 80023e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <MX_TIM3_Init+0x94>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2699;
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <MX_TIM3_Init+0x94>)
 80023ec:	f640 228b 	movw	r2, #2699	@ 0xa8b
 80023f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <MX_TIM3_Init+0x94>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f8:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <MX_TIM3_Init+0x94>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023fe:	4814      	ldr	r0, [pc, #80]	@ (8002450 <MX_TIM3_Init+0x94>)
 8002400:	f002 fed8 	bl	80051b4 <HAL_TIM_Base_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800240a:	f000 f901 	bl	8002610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002412:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002414:	f107 0308 	add.w	r3, r7, #8
 8002418:	4619      	mov	r1, r3
 800241a:	480d      	ldr	r0, [pc, #52]	@ (8002450 <MX_TIM3_Init+0x94>)
 800241c:	f003 f892 	bl	8005544 <HAL_TIM_ConfigClockSource>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002426:	f000 f8f3 	bl	8002610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	4619      	mov	r1, r3
 8002436:	4806      	ldr	r0, [pc, #24]	@ (8002450 <MX_TIM3_Init+0x94>)
 8002438:	f003 faae 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002442:	f000 f8e5 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200000ec 	.word	0x200000ec
 8002454:	40000400 	.word	0x40000400

08002458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	@ 0x30
 800245c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	4b61      	ldr	r3, [pc, #388]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a60      	ldr	r2, [pc, #384]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002478:	f043 0320 	orr.w	r3, r3, #32
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b5e      	ldr	r3, [pc, #376]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	4b5a      	ldr	r3, [pc, #360]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a59      	ldr	r2, [pc, #356]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b57      	ldr	r3, [pc, #348]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	4a52      	ldr	r2, [pc, #328]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b6:	4b50      	ldr	r3, [pc, #320]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b4c      	ldr	r3, [pc, #304]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4a4b      	ldr	r2, [pc, #300]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4b49      	ldr	r3, [pc, #292]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	4b45      	ldr	r3, [pc, #276]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4a44      	ldr	r2, [pc, #272]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4b42      	ldr	r3, [pc, #264]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a3d      	ldr	r2, [pc, #244]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002504:	f043 0308 	orr.w	r3, r3, #8
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4b37      	ldr	r3, [pc, #220]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a36      	ldr	r2, [pc, #216]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b34      	ldr	r3, [pc, #208]	@ (80025f8 <MX_GPIO_Init+0x1a0>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	2104      	movs	r1, #4
 8002536:	4831      	ldr	r0, [pc, #196]	@ (80025fc <MX_GPIO_Init+0x1a4>)
 8002538:	f000 fe48 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RDX_Pin|LCD_WRX_Pin, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002542:	482f      	ldr	r0, [pc, #188]	@ (8002600 <MX_GPIO_Init+0x1a8>)
 8002544:	f000 fe42 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
 800254a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800254e:	482d      	ldr	r0, [pc, #180]	@ (8002604 <MX_GPIO_Init+0x1ac>)
 8002550:	f000 fe3c 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002554:	2304      	movs	r3, #4
 8002556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	2301      	movs	r3, #1
 800255a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002560:	2302      	movs	r3, #2
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	4824      	ldr	r0, [pc, #144]	@ (80025fc <MX_GPIO_Init+0x1a4>)
 800256c:	f000 fb76 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTN_Pin */
  GPIO_InitStruct.Pin = BOTN_Pin;
 8002570:	2301      	movs	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002574:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800257a:	2302      	movs	r3, #2
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOTN_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 031c 	add.w	r3, r7, #28
 8002582:	4619      	mov	r1, r3
 8002584:	4820      	ldr	r0, [pc, #128]	@ (8002608 <MX_GPIO_Init+0x1b0>)
 8002586:	f000 fb69 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800258a:	2304      	movs	r3, #4
 800258c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002592:	2301      	movs	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	481b      	ldr	r0, [pc, #108]	@ (800260c <MX_GPIO_Init+0x1b4>)
 800259e:	f000 fb5d 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RDX_Pin LCD_WRX_Pin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|LCD_WRX_Pin;
 80025a2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80025a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b0:	2302      	movs	r3, #2
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	4619      	mov	r1, r3
 80025ba:	4811      	ldr	r0, [pc, #68]	@ (8002600 <MX_GPIO_Init+0x1a8>)
 80025bc:	f000 fb4e 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80025c0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80025c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	480a      	ldr	r0, [pc, #40]	@ (8002604 <MX_GPIO_Init+0x1ac>)
 80025da:	f000 fb3f 	bl	8002c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	2006      	movs	r0, #6
 80025e4:	f000 fb03 	bl	8002bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025e8:	2006      	movs	r0, #6
 80025ea:	f000 fb1c 	bl	8002c26 <HAL_NVIC_EnableIRQ>

}
 80025ee:	bf00      	nop
 80025f0:	3730      	adds	r7, #48	@ 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021800 	.word	0x40021800
 8002608:	40020000 	.word	0x40020000
 800260c:	40020400 	.word	0x40020400

08002610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002614:	b672      	cpsid	i
}
 8002616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){}
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <Error_Handler+0x8>

0800261c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <HAL_MspInit+0x4c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <HAL_MspInit+0x4c>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002630:	6453      	str	r3, [r2, #68]	@ 0x44
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HAL_MspInit+0x4c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <HAL_MspInit+0x4c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	4a08      	ldr	r2, [pc, #32]	@ (8002668 <HAL_MspInit+0x4c>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	@ 0x40
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_MspInit+0x4c>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800

0800266c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a29      	ldr	r2, [pc, #164]	@ (8002730 <HAL_I2C_MspInit+0xc4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d14b      	bne.n	8002726 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a27      	ldr	r2, [pc, #156]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b21      	ldr	r3, [pc, #132]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a20      	ldr	r2, [pc, #128]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = SDA_ACP_Touch_I2C3_Pin;
 80026c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026cc:	2312      	movs	r3, #18
 80026ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026d0:	2301      	movs	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d4:	2302      	movs	r3, #2
 80026d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026d8:	2304      	movs	r3, #4
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_ACP_Touch_I2C3_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4619      	mov	r1, r3
 80026e2:	4815      	ldr	r0, [pc, #84]	@ (8002738 <HAL_I2C_MspInit+0xcc>)
 80026e4:	f000 faba 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_ACP_Touch_I2C3_Pin;
 80026e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ee:	2312      	movs	r3, #18
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f6:	2302      	movs	r3, #2
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026fa:	2304      	movs	r3, #4
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_ACP_Touch_I2C3_GPIO_Port, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <HAL_I2C_MspInit+0xd0>)
 8002706:	f000 faa9 	bl	8002c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 8002714:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_I2C_MspInit+0xc8>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40005c00 	.word	0x40005c00
 8002734:	40023800 	.word	0x40023800
 8002738:	40020800 	.word	0x40020800
 800273c:	40020000 	.word	0x40020000

08002740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <HAL_SPI_MspInit+0x84>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d12c      	bne.n	80027bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 800276c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002770:	6453      	str	r3, [r2, #68]	@ 0x44
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a10      	ldr	r2, [pc, #64]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002788:	f043 0320 	orr.w	r3, r3, #32
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800279a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80027ac:	2305      	movs	r3, #5
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4805      	ldr	r0, [pc, #20]	@ (80027cc <HAL_SPI_MspInit+0x8c>)
 80027b8:	f000 fa50 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	@ 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40015000 	.word	0x40015000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40021400 	.word	0x40021400

080027d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <HAL_SPI_MspDeInit+0x30>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10a      	bne.n	80027f8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_SPI_MspDeInit+0x34>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a07      	ldr	r2, [pc, #28]	@ (8002804 <HAL_SPI_MspDeInit+0x34>)
 80027e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80027ee:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80027f2:	4805      	ldr	r0, [pc, #20]	@ (8002808 <HAL_SPI_MspDeInit+0x38>)
 80027f4:	f000 fbde 	bl	8002fb4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40015000 	.word	0x40015000
 8002804:	40023800 	.word	0x40023800
 8002808:	40021400 	.word	0x40021400

0800280c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0e      	ldr	r2, [pc, #56]	@ (8002854 <HAL_TIM_Base_MspInit+0x48>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d115      	bne.n	800284a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <HAL_TIM_Base_MspInit+0x4c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a0c      	ldr	r2, [pc, #48]	@ (8002858 <HAL_TIM_Base_MspInit+0x4c>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_TIM_Base_MspInit+0x4c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	201d      	movs	r0, #29
 8002840:	f000 f9d5 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002844:	201d      	movs	r0, #29
 8002846:	f000 f9ee 	bl	8002c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40000400 	.word	0x40000400
 8002858:	40023800 	.word	0x40023800

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <NMI_Handler+0x4>

08002864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <HardFault_Handler+0x4>

0800286c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <MemManage_Handler+0x4>

08002874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <UsageFault_Handler+0x4>

08002884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b2:	f000 f8a1 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}

080028ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTN_Pin);
 80028be:	2001      	movs	r0, #1
 80028c0:	f000 fcb8 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <TIM3_IRQHandler+0x10>)
 80028ce:	f002 fd31 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200000ec 	.word	0x200000ec

080028dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <SystemInit+0x20>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <SystemInit+0x20>)
 80028e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002938 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002904:	480d      	ldr	r0, [pc, #52]	@ (800293c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002906:	490e      	ldr	r1, [pc, #56]	@ (8002940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002908:	4a0e      	ldr	r2, [pc, #56]	@ (8002944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800291c:	4c0b      	ldr	r4, [pc, #44]	@ (800294c <LoopFillZerobss+0x26>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800292a:	f7ff ffd7 	bl	80028dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292e:	f003 f8cb 	bl	8005ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002932:	f7ff f9fb 	bl	8001d2c <main>
  bx  lr    
 8002936:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002938:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002940:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002944:	080062fc 	.word	0x080062fc
  ldr r2, =_sbss
 8002948:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800294c:	200259cc 	.word	0x200259cc

08002950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC_IRQHandler>
	...

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002958:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <HAL_Init+0x40>)
 800295e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_Init+0x40>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800296e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	@ (8002994 <HAL_Init+0x40>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 f92b 	bl	8002bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fe48 	bl	800261c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f943 	bl	8002c42 <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 f90b 	bl	8002bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	@ (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000018 	.word	0x20000018
 80029f0:	20000020 	.word	0x20000020
 80029f4:	2000001c 	.word	0x2000001c

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000020 	.word	0x20000020
 8002a1c:	200259c8 	.word	0x200259c8

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	200259c8 	.word	0x200259c8

08002a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a54:	4013      	ands	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6a:	4a04      	ldr	r2, [pc, #16]	@ (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	60d3      	str	r3, [r2, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <__NVIC_GetPriorityGrouping+0x18>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 0307 	and.w	r3, r3, #7
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	db0b      	blt.n	8002ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4907      	ldr	r1, [pc, #28]	@ (8002ad4 <__NVIC_EnableIRQ+0x38>)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2001      	movs	r0, #1
 8002abe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	@ (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	@ (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	@ 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	bf28      	it	cs
 8002b4a:	2304      	movcs	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b03      	subs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	@ 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba4:	d301      	bcc.n	8002baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002baa:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f7ff ff8e 	bl	8002ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bbc:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc2:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff29 	bl	8002a38 <__NVIC_SetPriorityGrouping>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c00:	f7ff ff3e 	bl	8002a80 <__NVIC_GetPriorityGrouping>
 8002c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff8e 	bl	8002b2c <NVIC_EncodePriority>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff5d 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff31 	bl	8002a9c <__NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffa2 	bl	8002b94 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	@ 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e177      	b.n	8002f68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8166 	bne.w	8002f62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d130      	bne.n	8002d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 0201 	and.w	r2, r3, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d017      	beq.n	8002d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d123      	bne.n	8002da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80c0 	beq.w	8002f62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b66      	ldr	r3, [pc, #408]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	4a65      	ldr	r2, [pc, #404]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df2:	4b63      	ldr	r3, [pc, #396]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dfe:	4a61      	ldr	r2, [pc, #388]	@ (8002f84 <HAL_GPIO_Init+0x328>)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a58      	ldr	r2, [pc, #352]	@ (8002f88 <HAL_GPIO_Init+0x32c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d037      	beq.n	8002e9a <HAL_GPIO_Init+0x23e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a57      	ldr	r2, [pc, #348]	@ (8002f8c <HAL_GPIO_Init+0x330>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d031      	beq.n	8002e96 <HAL_GPIO_Init+0x23a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a56      	ldr	r2, [pc, #344]	@ (8002f90 <HAL_GPIO_Init+0x334>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d02b      	beq.n	8002e92 <HAL_GPIO_Init+0x236>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a55      	ldr	r2, [pc, #340]	@ (8002f94 <HAL_GPIO_Init+0x338>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d025      	beq.n	8002e8e <HAL_GPIO_Init+0x232>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a54      	ldr	r2, [pc, #336]	@ (8002f98 <HAL_GPIO_Init+0x33c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01f      	beq.n	8002e8a <HAL_GPIO_Init+0x22e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a53      	ldr	r2, [pc, #332]	@ (8002f9c <HAL_GPIO_Init+0x340>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d019      	beq.n	8002e86 <HAL_GPIO_Init+0x22a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a52      	ldr	r2, [pc, #328]	@ (8002fa0 <HAL_GPIO_Init+0x344>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_Init+0x226>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a51      	ldr	r2, [pc, #324]	@ (8002fa4 <HAL_GPIO_Init+0x348>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00d      	beq.n	8002e7e <HAL_GPIO_Init+0x222>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a50      	ldr	r2, [pc, #320]	@ (8002fa8 <HAL_GPIO_Init+0x34c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <HAL_GPIO_Init+0x21e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fac <HAL_GPIO_Init+0x350>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_GPIO_Init+0x21a>
 8002e72:	2309      	movs	r3, #9
 8002e74:	e012      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e76:	230a      	movs	r3, #10
 8002e78:	e010      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	e00e      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	e00c      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e82:	2306      	movs	r3, #6
 8002e84:	e00a      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e86:	2305      	movs	r3, #5
 8002e88:	e008      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e004      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e002      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_GPIO_Init+0x240>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	f002 0203 	and.w	r2, r2, #3
 8002ea2:	0092      	lsls	r2, r2, #2
 8002ea4:	4093      	lsls	r3, r2
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eac:	4935      	ldr	r1, [pc, #212]	@ (8002f84 <HAL_GPIO_Init+0x328>)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eba:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb0 <HAL_GPIO_Init+0x354>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ede:	4a34      	ldr	r2, [pc, #208]	@ (8002fb0 <HAL_GPIO_Init+0x354>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee4:	4b32      	ldr	r3, [pc, #200]	@ (8002fb0 <HAL_GPIO_Init+0x354>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f08:	4a29      	ldr	r2, [pc, #164]	@ (8002fb0 <HAL_GPIO_Init+0x354>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f0e:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <HAL_GPIO_Init+0x354>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f32:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <HAL_GPIO_Init+0x354>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <HAL_GPIO_Init+0x354>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f5c:	4a14      	ldr	r2, [pc, #80]	@ (8002fb0 <HAL_GPIO_Init+0x354>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3301      	adds	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	f67f ae84 	bls.w	8002c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3724      	adds	r7, #36	@ 0x24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40013800 	.word	0x40013800
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	40020400 	.word	0x40020400
 8002f90:	40020800 	.word	0x40020800
 8002f94:	40020c00 	.word	0x40020c00
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40021400 	.word	0x40021400
 8002fa0:	40021800 	.word	0x40021800
 8002fa4:	40021c00 	.word	0x40021c00
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40022400 	.word	0x40022400
 8002fb0:	40013c00 	.word	0x40013c00

08002fb4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e0d9      	b.n	8003184 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	f040 80c9 	bne.w	800317e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002fec:	4a6b      	ldr	r2, [pc, #428]	@ (800319c <HAL_GPIO_DeInit+0x1e8>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a63      	ldr	r2, [pc, #396]	@ (80031a0 <HAL_GPIO_DeInit+0x1ec>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d037      	beq.n	8003086 <HAL_GPIO_DeInit+0xd2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a62      	ldr	r2, [pc, #392]	@ (80031a4 <HAL_GPIO_DeInit+0x1f0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d031      	beq.n	8003082 <HAL_GPIO_DeInit+0xce>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a61      	ldr	r2, [pc, #388]	@ (80031a8 <HAL_GPIO_DeInit+0x1f4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d02b      	beq.n	800307e <HAL_GPIO_DeInit+0xca>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a60      	ldr	r2, [pc, #384]	@ (80031ac <HAL_GPIO_DeInit+0x1f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d025      	beq.n	800307a <HAL_GPIO_DeInit+0xc6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a5f      	ldr	r2, [pc, #380]	@ (80031b0 <HAL_GPIO_DeInit+0x1fc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01f      	beq.n	8003076 <HAL_GPIO_DeInit+0xc2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a5e      	ldr	r2, [pc, #376]	@ (80031b4 <HAL_GPIO_DeInit+0x200>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d019      	beq.n	8003072 <HAL_GPIO_DeInit+0xbe>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a5d      	ldr	r2, [pc, #372]	@ (80031b8 <HAL_GPIO_DeInit+0x204>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_GPIO_DeInit+0xba>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a5c      	ldr	r2, [pc, #368]	@ (80031bc <HAL_GPIO_DeInit+0x208>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00d      	beq.n	800306a <HAL_GPIO_DeInit+0xb6>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a5b      	ldr	r2, [pc, #364]	@ (80031c0 <HAL_GPIO_DeInit+0x20c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_DeInit+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a5a      	ldr	r2, [pc, #360]	@ (80031c4 <HAL_GPIO_DeInit+0x210>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_GPIO_DeInit+0xae>
 800305e:	2309      	movs	r3, #9
 8003060:	e012      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 8003062:	230a      	movs	r3, #10
 8003064:	e010      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 8003066:	2308      	movs	r3, #8
 8003068:	e00e      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 800306a:	2307      	movs	r3, #7
 800306c:	e00c      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 800306e:	2306      	movs	r3, #6
 8003070:	e00a      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 8003072:	2305      	movs	r3, #5
 8003074:	e008      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 8003076:	2304      	movs	r3, #4
 8003078:	e006      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 800307a:	2303      	movs	r3, #3
 800307c:	e004      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 800307e:	2302      	movs	r3, #2
 8003080:	e002      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_GPIO_DeInit+0xd4>
 8003086:	2300      	movs	r3, #0
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	f002 0203 	and.w	r2, r2, #3
 800308e:	0092      	lsls	r2, r2, #2
 8003090:	4093      	lsls	r3, r2
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	429a      	cmp	r2, r3
 8003096:	d132      	bne.n	80030fe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003098:	4b4b      	ldr	r3, [pc, #300]	@ (80031c8 <HAL_GPIO_DeInit+0x214>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43db      	mvns	r3, r3
 80030a0:	4949      	ldr	r1, [pc, #292]	@ (80031c8 <HAL_GPIO_DeInit+0x214>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030a6:	4b48      	ldr	r3, [pc, #288]	@ (80031c8 <HAL_GPIO_DeInit+0x214>)
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	4946      	ldr	r1, [pc, #280]	@ (80031c8 <HAL_GPIO_DeInit+0x214>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030b4:	4b44      	ldr	r3, [pc, #272]	@ (80031c8 <HAL_GPIO_DeInit+0x214>)
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	4942      	ldr	r1, [pc, #264]	@ (80031c8 <HAL_GPIO_DeInit+0x214>)
 80030be:	4013      	ands	r3, r2
 80030c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030c2:	4b41      	ldr	r3, [pc, #260]	@ (80031c8 <HAL_GPIO_DeInit+0x214>)
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	493f      	ldr	r1, [pc, #252]	@ (80031c8 <HAL_GPIO_DeInit+0x214>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80030e0:	4a2e      	ldr	r2, [pc, #184]	@ (800319c <HAL_GPIO_DeInit+0x1e8>)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	3302      	adds	r3, #2
 80030e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	43da      	mvns	r2, r3
 80030f0:	482a      	ldr	r0, [pc, #168]	@ (800319c <HAL_GPIO_DeInit+0x1e8>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	400a      	ands	r2, r1
 80030f8:	3302      	adds	r3, #2
 80030fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2103      	movs	r1, #3
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	08da      	lsrs	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3208      	adds	r2, #8
 800311c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	08d2      	lsrs	r2, r2, #3
 8003134:	4019      	ands	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2103      	movs	r1, #3
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	2101      	movs	r1, #1
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2103      	movs	r1, #3
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	401a      	ands	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	3301      	adds	r3, #1
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b0f      	cmp	r3, #15
 8003188:	f67f af22 	bls.w	8002fd0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40013800 	.word	0x40013800
 80031a0:	40020000 	.word	0x40020000
 80031a4:	40020400 	.word	0x40020400
 80031a8:	40020800 	.word	0x40020800
 80031ac:	40020c00 	.word	0x40020c00
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40021400 	.word	0x40021400
 80031b8:	40021800 	.word	0x40021800
 80031bc:	40021c00 	.word	0x40021c00
 80031c0:	40022000 	.word	0x40022000
 80031c4:	40022400 	.word	0x40022400
 80031c8:	40013c00 	.word	0x40013c00

080031cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031dc:	787b      	ldrb	r3, [r7, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031e8:	e003      	b.n	80031f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	041a      	lsls	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	619a      	str	r2, [r3, #24]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4013      	ands	r3, r2
 8003216:	041a      	lsls	r2, r3, #16
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43d9      	mvns	r1, r3
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	400b      	ands	r3, r1
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800323e:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f806 	bl	8003264 <HAL_GPIO_EXTI_Callback>
  }
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e12b      	b.n	80034e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff f9e2 	bl	800266c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	@ 0x24
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032e0:	f001 fc9c 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80032e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a81      	ldr	r2, [pc, #516]	@ (80034f0 <HAL_I2C_Init+0x274>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d807      	bhi.n	8003300 <HAL_I2C_Init+0x84>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a80      	ldr	r2, [pc, #512]	@ (80034f4 <HAL_I2C_Init+0x278>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	bf94      	ite	ls
 80032f8:	2301      	movls	r3, #1
 80032fa:	2300      	movhi	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e006      	b.n	800330e <HAL_I2C_Init+0x92>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a7d      	ldr	r2, [pc, #500]	@ (80034f8 <HAL_I2C_Init+0x27c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0e7      	b.n	80034e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a78      	ldr	r2, [pc, #480]	@ (80034fc <HAL_I2C_Init+0x280>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0c9b      	lsrs	r3, r3, #18
 8003320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a6a      	ldr	r2, [pc, #424]	@ (80034f0 <HAL_I2C_Init+0x274>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d802      	bhi.n	8003350 <HAL_I2C_Init+0xd4>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3301      	adds	r3, #1
 800334e:	e009      	b.n	8003364 <HAL_I2C_Init+0xe8>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	4a69      	ldr	r2, [pc, #420]	@ (8003500 <HAL_I2C_Init+0x284>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	099b      	lsrs	r3, r3, #6
 8003362:	3301      	adds	r3, #1
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	430b      	orrs	r3, r1
 800336a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003376:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	495c      	ldr	r1, [pc, #368]	@ (80034f0 <HAL_I2C_Init+0x274>)
 8003380:	428b      	cmp	r3, r1
 8003382:	d819      	bhi.n	80033b8 <HAL_I2C_Init+0x13c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e59      	subs	r1, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003398:	400b      	ands	r3, r1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_I2C_Init+0x138>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1e59      	subs	r1, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b2:	e051      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 80033b4:	2304      	movs	r3, #4
 80033b6:	e04f      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d111      	bne.n	80033e4 <HAL_I2C_Init+0x168>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e58      	subs	r0, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e012      	b.n	800340a <HAL_I2C_Init+0x18e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	0099      	lsls	r1, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Init+0x196>
 800340e:	2301      	movs	r3, #1
 8003410:	e022      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <HAL_I2C_Init+0x1bc>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1e58      	subs	r0, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	440b      	add	r3, r1
 8003428:	fbb0 f3f3 	udiv	r3, r0, r3
 800342c:	3301      	adds	r3, #1
 800342e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003436:	e00f      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e58      	subs	r0, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	0099      	lsls	r1, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	6809      	ldr	r1, [r1, #0]
 800345c:	4313      	orrs	r3, r2
 800345e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003486:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6911      	ldr	r1, [r2, #16]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68d2      	ldr	r2, [r2, #12]
 8003492:	4311      	orrs	r1, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	430b      	orrs	r3, r1
 800349a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	000186a0 	.word	0x000186a0
 80034f4:	001e847f 	.word	0x001e847f
 80034f8:	003d08ff 	.word	0x003d08ff
 80034fc:	431bde83 	.word	0x431bde83
 8003500:	10624dd3 	.word	0x10624dd3

08003504 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	461a      	mov	r2, r3
 8003510:	460b      	mov	r3, r1
 8003512:	817b      	strh	r3, [r7, #10]
 8003514:	4613      	mov	r3, r2
 8003516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff fa82 	bl	8002a20 <HAL_GetTick>
 800351c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b20      	cmp	r3, #32
 8003528:	f040 80e0 	bne.w	80036ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2319      	movs	r3, #25
 8003532:	2201      	movs	r2, #1
 8003534:	4970      	ldr	r1, [pc, #448]	@ (80036f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fc58 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	e0d3      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_I2C_Master_Transmit+0x50>
 8003550:	2302      	movs	r3, #2
 8003552:	e0cc      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d007      	beq.n	800357a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2221      	movs	r2, #33	@ 0x21
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2210      	movs	r2, #16
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	893a      	ldrh	r2, [r7, #8]
 80035aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a50      	ldr	r2, [pc, #320]	@ (80036fc <HAL_I2C_Master_Transmit+0x1f8>)
 80035ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035bc:	8979      	ldrh	r1, [r7, #10]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fac2 	bl	8003b4c <I2C_MasterRequestWrite>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e08d      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035e8:	e066      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	6a39      	ldr	r1, [r7, #32]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fcd2 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d107      	bne.n	8003612 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06b      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d11b      	bne.n	800368c <HAL_I2C_Master_Transmit+0x188>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d017      	beq.n	800368c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	6a39      	ldr	r1, [r7, #32]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fcc2 	bl	800401a <I2C_WaitOnBTFFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d107      	bne.n	80036b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e01a      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d194      	bne.n	80035ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	00100002 	.word	0x00100002
 80036fc:	ffff0000 	.word	0xffff0000

08003700 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	@ 0x30
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	460b      	mov	r3, r1
 800370e:	817b      	strh	r3, [r7, #10]
 8003710:	4613      	mov	r3, r2
 8003712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff f984 	bl	8002a20 <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b20      	cmp	r3, #32
 8003724:	f040 820b 	bne.w	8003b3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2319      	movs	r3, #25
 800372e:	2201      	movs	r2, #1
 8003730:	497c      	ldr	r1, [pc, #496]	@ (8003924 <HAL_I2C_Master_Receive+0x224>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fb5a 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	e1fe      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_I2C_Master_Receive+0x50>
 800374c:	2302      	movs	r3, #2
 800374e:	e1f7      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d007      	beq.n	8003776 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2222      	movs	r2, #34	@ 0x22
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2210      	movs	r2, #16
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	893a      	ldrh	r2, [r7, #8]
 80037a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a5c      	ldr	r2, [pc, #368]	@ (8003928 <HAL_I2C_Master_Receive+0x228>)
 80037b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037b8:	8979      	ldrh	r1, [r7, #10]
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fa46 	bl	8003c50 <I2C_MasterRequestRead>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1b8      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d113      	bne.n	80037fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	623b      	str	r3, [r7, #32]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e18c      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003802:	2b01      	cmp	r3, #1
 8003804:	d11b      	bne.n	800383e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e16c      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	2b02      	cmp	r3, #2
 8003844:	d11b      	bne.n	800387e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	e14c      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800388c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038a4:	e138      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	f200 80f1 	bhi.w	8003a92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d123      	bne.n	8003900 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fbed 	bl	800409c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e139      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038fe:	e10b      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	2b02      	cmp	r3, #2
 8003906:	d14e      	bne.n	80039a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	2200      	movs	r2, #0
 8003910:	4906      	ldr	r1, [pc, #24]	@ (800392c <HAL_I2C_Master_Receive+0x22c>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fa6a 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e10e      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
 8003922:	bf00      	nop
 8003924:	00100002 	.word	0x00100002
 8003928:	ffff0000 	.word	0xffff0000
 800392c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039a4:	e0b8      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	2200      	movs	r2, #0
 80039ae:	4966      	ldr	r1, [pc, #408]	@ (8003b48 <HAL_I2C_Master_Receive+0x448>)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fa1b 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0bf      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	2200      	movs	r2, #0
 8003a0a:	494f      	ldr	r1, [pc, #316]	@ (8003b48 <HAL_I2C_Master_Receive+0x448>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f9ed 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e091      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a90:	e042      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fb00 	bl	800409c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e04c      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d118      	bne.n	8003b18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f47f aec2 	bne.w	80038a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
  }
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3728      	adds	r7, #40	@ 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	00010004 	.word	0x00010004

08003b4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d006      	beq.n	8003b76 <I2C_MasterRequestWrite+0x2a>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d003      	beq.n	8003b76 <I2C_MasterRequestWrite+0x2a>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b74:	d108      	bne.n	8003b88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e00b      	b.n	8003ba0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	2b12      	cmp	r3, #18
 8003b8e:	d107      	bne.n	8003ba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f91d 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc6:	d103      	bne.n	8003bd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e035      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bdc:	d108      	bne.n	8003bf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bde:	897b      	ldrh	r3, [r7, #10]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	e01b      	b.n	8003c28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bf0:	897b      	ldrh	r3, [r7, #10]
 8003bf2:	11db      	asrs	r3, r3, #7
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0306 	and.w	r3, r3, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f063 030f 	orn	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	490e      	ldr	r1, [pc, #56]	@ (8003c48 <I2C_MasterRequestWrite+0xfc>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f943 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e010      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4907      	ldr	r1, [pc, #28]	@ (8003c4c <I2C_MasterRequestWrite+0x100>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f933 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	00010008 	.word	0x00010008
 8003c4c:	00010002 	.word	0x00010002

08003c50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d006      	beq.n	8003c8a <I2C_MasterRequestRead+0x3a>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d003      	beq.n	8003c8a <I2C_MasterRequestRead+0x3a>
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c88:	d108      	bne.n	8003c9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e00b      	b.n	8003cb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	2b11      	cmp	r3, #17
 8003ca2:	d107      	bne.n	8003cb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f893 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cda:	d103      	bne.n	8003ce4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e079      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf0:	d108      	bne.n	8003d04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cf2:	897b      	ldrh	r3, [r7, #10]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	e05f      	b.n	8003dc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d04:	897b      	ldrh	r3, [r7, #10]
 8003d06:	11db      	asrs	r3, r3, #7
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 0306 	and.w	r3, r3, #6
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f063 030f 	orn	r3, r3, #15
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4930      	ldr	r1, [pc, #192]	@ (8003de4 <I2C_MasterRequestRead+0x194>)
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f8b9 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e054      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4929      	ldr	r1, [pc, #164]	@ (8003de8 <I2C_MasterRequestRead+0x198>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f8a9 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e044      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f831 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9e:	d103      	bne.n	8003da8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e017      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003dac:	897b      	ldrh	r3, [r7, #10]
 8003dae:	11db      	asrs	r3, r3, #7
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0306 	and.w	r3, r3, #6
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f063 030e 	orn	r3, r3, #14
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4907      	ldr	r1, [pc, #28]	@ (8003de8 <I2C_MasterRequestRead+0x198>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f865 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	00010008 	.word	0x00010008
 8003de8:	00010002 	.word	0x00010002

08003dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfc:	e025      	b.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d021      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e06:	f7fe fe0b 	bl	8002a20 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d116      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f043 0220 	orr.w	r2, r3, #32
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e023      	b.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10d      	bne.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf0c      	ite	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	2300      	movne	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	e00c      	b.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d0b6      	beq.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ea8:	e051      	b.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb8:	d123      	bne.n	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e046      	b.n	8003f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d021      	beq.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fe fd89 	bl	8002a20 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e020      	b.n	8003f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10c      	bne.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e00b      	b.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d18d      	bne.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa4:	e02d      	b.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f8ce 	bl	8004148 <I2C_IsAcknowledgeFailed>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e02d      	b.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d021      	beq.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fe fd2f 	bl	8002a20 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d116      	bne.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e007      	b.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400c:	2b80      	cmp	r3, #128	@ 0x80
 800400e:	d1ca      	bne.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004026:	e02d      	b.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f88d 	bl	8004148 <I2C_IsAcknowledgeFailed>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e02d      	b.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d021      	beq.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7fe fcee 	bl	8002a20 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d116      	bne.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e007      	b.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b04      	cmp	r3, #4
 8004090:	d1ca      	bne.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040a8:	e042      	b.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d119      	bne.n	80040ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0210 	mvn.w	r2, #16
 80040c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e029      	b.n	8004140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ec:	f7fe fc98 	bl	8002a20 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e007      	b.n	8004140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d1b5      	bne.n	80040aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d11b      	bne.n	8004198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	f043 0204 	orr.w	r2, r3, #4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d129      	bne.n	8004210 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	@ 0x24
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0210 	bic.w	r2, r2, #16
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b20      	cmp	r3, #32
 8004236:	d12a      	bne.n	800428e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	@ 0x24
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004258:	89fb      	ldrh	r3, [r7, #14]
 800425a:	f023 030f 	bic.w	r3, r3, #15
 800425e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b29a      	uxth	r2, r3
 8004264:	89fb      	ldrh	r3, [r7, #14]
 8004266:	4313      	orrs	r3, r2
 8004268:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	89fa      	ldrh	r2, [r7, #14]
 8004270:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4b20      	ldr	r3, [pc, #128]	@ (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	4a1f      	ldr	r2, [pc, #124]	@ (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042b6:	4b1d      	ldr	r3, [pc, #116]	@ (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004330 <HAL_PWREx_EnableOverDrive+0x94>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042c8:	f7fe fbaa 	bl	8002a20 <HAL_GetTick>
 80042cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ce:	e009      	b.n	80042e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d0:	f7fe fba6 	bl	8002a20 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042de:	d901      	bls.n	80042e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e01f      	b.n	8004324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042e4:	4b13      	ldr	r3, [pc, #76]	@ (8004334 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f0:	d1ee      	bne.n	80042d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042f2:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042f8:	f7fe fb92 	bl	8002a20 <HAL_GetTick>
 80042fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042fe:	e009      	b.n	8004314 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004300:	f7fe fb8e 	bl	8002a20 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800430e:	d901      	bls.n	8004314 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e007      	b.n	8004324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004314:	4b07      	ldr	r3, [pc, #28]	@ (8004334 <HAL_PWREx_EnableOverDrive+0x98>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004320:	d1ee      	bne.n	8004300 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	420e0040 	.word	0x420e0040
 8004334:	40007000 	.word	0x40007000
 8004338:	420e0044 	.word	0x420e0044

0800433c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e267      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d075      	beq.n	8004446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800435a:	4b88      	ldr	r3, [pc, #544]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d00c      	beq.n	8004380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004366:	4b85      	ldr	r3, [pc, #532]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436e:	2b08      	cmp	r3, #8
 8004370:	d112      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004372:	4b82      	ldr	r3, [pc, #520]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800437e:	d10b      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	4b7e      	ldr	r3, [pc, #504]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d05b      	beq.n	8004444 <HAL_RCC_OscConfig+0x108>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d157      	bne.n	8004444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e242      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x74>
 80043a2:	4b76      	ldr	r3, [pc, #472]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a75      	ldr	r2, [pc, #468]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e01d      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x98>
 80043ba:	4b70      	ldr	r3, [pc, #448]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6f      	ldr	r2, [pc, #444]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b6d      	ldr	r3, [pc, #436]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6c      	ldr	r2, [pc, #432]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043d4:	4b69      	ldr	r3, [pc, #420]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a68      	ldr	r2, [pc, #416]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b66      	ldr	r3, [pc, #408]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a65      	ldr	r2, [pc, #404]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fe fb14 	bl	8002a20 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fe fb10 	bl	8002a20 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	@ 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e207      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b5b      	ldr	r3, [pc, #364]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0xc0>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fe fb00 	bl	8002a20 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004424:	f7fe fafc 	bl	8002a20 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	@ 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1f3      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	4b51      	ldr	r3, [pc, #324]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0xe8>
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d063      	beq.n	800451a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004452:	4b4a      	ldr	r3, [pc, #296]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b44      	ldr	r3, [pc, #272]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	4b41      	ldr	r3, [pc, #260]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e1c7      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4937      	ldr	r1, [pc, #220]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e03a      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	4b34      	ldr	r3, [pc, #208]	@ (8004580 <HAL_RCC_OscConfig+0x244>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fe fab5 	bl	8002a20 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ba:	f7fe fab1 	bl	8002a20 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1a8      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b28      	ldr	r3, [pc, #160]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4925      	ldr	r1, [pc, #148]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
 80044ec:	e015      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ee:	4b24      	ldr	r3, [pc, #144]	@ (8004580 <HAL_RCC_OscConfig+0x244>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fe fa94 	bl	8002a20 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044fc:	f7fe fa90 	bl	8002a20 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e187      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	4b1b      	ldr	r3, [pc, #108]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d036      	beq.n	8004594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <HAL_RCC_OscConfig+0x248>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fe fa74 	bl	8002a20 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800453c:	f7fe fa70 	bl	8002a20 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e167      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x200>
 800455a:	e01b      	b.n	8004594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <HAL_RCC_OscConfig+0x248>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fe fa5d 	bl	8002a20 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	e00e      	b.n	8004588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456a:	f7fe fa59 	bl	8002a20 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d907      	bls.n	8004588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e150      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
 800457c:	40023800 	.word	0x40023800
 8004580:	42470000 	.word	0x42470000
 8004584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	4b88      	ldr	r3, [pc, #544]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800458a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ea      	bne.n	800456a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8097 	beq.w	80046d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b81      	ldr	r3, [pc, #516]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	4b7d      	ldr	r3, [pc, #500]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	4a7c      	ldr	r2, [pc, #496]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c2:	4b7a      	ldr	r3, [pc, #488]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d2:	4b77      	ldr	r3, [pc, #476]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d118      	bne.n	8004610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045de:	4b74      	ldr	r3, [pc, #464]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a73      	ldr	r2, [pc, #460]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fe fa19 	bl	8002a20 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fe fa15 	bl	8002a20 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e10c      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	4b6a      	ldr	r3, [pc, #424]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d106      	bne.n	8004626 <HAL_RCC_OscConfig+0x2ea>
 8004618:	4b64      	ldr	r3, [pc, #400]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461c:	4a63      	ldr	r2, [pc, #396]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6713      	str	r3, [r2, #112]	@ 0x70
 8004624:	e01c      	b.n	8004660 <HAL_RCC_OscConfig+0x324>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x30c>
 800462e:	4b5f      	ldr	r3, [pc, #380]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	4a5e      	ldr	r2, [pc, #376]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6713      	str	r3, [r2, #112]	@ 0x70
 800463a:	4b5c      	ldr	r3, [pc, #368]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463e:	4a5b      	ldr	r2, [pc, #364]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	@ 0x70
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0x324>
 8004648:	4b58      	ldr	r3, [pc, #352]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464c:	4a57      	ldr	r2, [pc, #348]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	@ 0x70
 8004654:	4b55      	ldr	r3, [pc, #340]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004658:	4a54      	ldr	r2, [pc, #336]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800465a:	f023 0304 	bic.w	r3, r3, #4
 800465e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fe f9da 	bl	8002a20 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fe f9d6 	bl	8002a20 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e0cb      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004686:	4b49      	ldr	r3, [pc, #292]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ee      	beq.n	8004670 <HAL_RCC_OscConfig+0x334>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004694:	f7fe f9c4 	bl	8002a20 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fe f9c0 	bl	8002a20 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0b5      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ee      	bne.n	800469c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c4:	4b39      	ldr	r3, [pc, #228]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	4a38      	ldr	r2, [pc, #224]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a1 	beq.w	800481c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046da:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d05c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d141      	bne.n	8004772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b31      	ldr	r3, [pc, #196]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fe f994 	bl	8002a20 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fe f990 	bl	8002a20 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e087      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	3b01      	subs	r3, #1
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	491b      	ldr	r1, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474a:	f7fe f969 	bl	8002a20 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004752:	f7fe f965 	bl	8002a20 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e05c      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	4b11      	ldr	r3, [pc, #68]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x416>
 8004770:	e054      	b.n	800481c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe f952 	bl	8002a20 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe f94e 	bl	8002a20 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e045      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x444>
 800479e:	e03d      	b.n	800481c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e038      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000
 80047b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <HAL_RCC_OscConfig+0x4ec>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d028      	beq.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d121      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d11a      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d111      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0cc      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b68      	ldr	r3, [pc, #416]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d90c      	bls.n	8004868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b65      	ldr	r3, [pc, #404]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b8      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b59      	ldr	r3, [pc, #356]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a58      	ldr	r2, [pc, #352]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800488a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004898:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a52      	ldr	r2, [pc, #328]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b50      	ldr	r3, [pc, #320]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	494d      	ldr	r1, [pc, #308]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d044      	beq.n	800494c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b47      	ldr	r3, [pc, #284]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d119      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b3f      	ldr	r3, [pc, #252]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b3b      	ldr	r3, [pc, #236]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e067      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4934      	ldr	r1, [pc, #208]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800491c:	f7fe f880 	bl	8002a20 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fe f87c 	bl	8002a20 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e04f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b25      	ldr	r3, [pc, #148]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d20c      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b22      	ldr	r3, [pc, #136]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4916      	ldr	r1, [pc, #88]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499e:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490e      	ldr	r1, [pc, #56]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f821 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490a      	ldr	r1, [pc, #40]	@ (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a09      	ldr	r2, [pc, #36]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ce:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd ffe0 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00
 80049e8:	40023800 	.word	0x40023800
 80049ec:	080062d4 	.word	0x080062d4
 80049f0:	20000018 	.word	0x20000018
 80049f4:	2000001c 	.word	0x2000001c

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b094      	sub	sp, #80	@ 0x50
 80049fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a04:	2300      	movs	r3, #0
 8004a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a08:	2300      	movs	r3, #0
 8004a0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a10:	4b79      	ldr	r3, [pc, #484]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d00d      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x40>
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	f200 80e1 	bhi.w	8004be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x34>
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a2a:	e0db      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b73      	ldr	r3, [pc, #460]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a30:	e0db      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a32:	4b73      	ldr	r3, [pc, #460]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a36:	e0d8      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a38:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a40:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a42:	4b6d      	ldr	r3, [pc, #436]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d063      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	2200      	movs	r2, #0
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	f04f 0000 	mov.w	r0, #0
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	0159      	lsls	r1, r3, #5
 8004a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a7c:	0150      	lsls	r0, r2, #5
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4621      	mov	r1, r4
 8004a84:	1a51      	subs	r1, r2, r1
 8004a86:	6139      	str	r1, [r7, #16]
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	018b      	lsls	r3, r1, #6
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	018a      	lsls	r2, r1, #6
 8004aaa:	4651      	mov	r1, sl
 8004aac:	ebb2 0801 	subs.w	r8, r2, r1
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aca:	4690      	mov	r8, r2
 8004acc:	4699      	mov	r9, r3
 8004ace:	4623      	mov	r3, r4
 8004ad0:	eb18 0303 	adds.w	r3, r8, r3
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	eb49 0303 	adc.w	r3, r9, r3
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004aea:	4629      	mov	r1, r5
 8004aec:	024b      	lsls	r3, r1, #9
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004af4:	4621      	mov	r1, r4
 8004af6:	024a      	lsls	r2, r1, #9
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afe:	2200      	movs	r2, #0
 8004b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b08:	f7fb fb70 	bl	80001ec <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4613      	mov	r3, r2
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b14:	e058      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b16:	4b38      	ldr	r3, [pc, #224]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	099b      	lsrs	r3, r3, #6
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	4611      	mov	r1, r2
 8004b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b42:	0150      	lsls	r0, r2, #5
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4641      	mov	r1, r8
 8004b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b4e:	4649      	mov	r1, r9
 8004b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b68:	ebb2 040a 	subs.w	r4, r2, sl
 8004b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	00eb      	lsls	r3, r5, #3
 8004b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	4643      	mov	r3, r8
 8004b86:	18e3      	adds	r3, r4, r3
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	eb45 0303 	adc.w	r3, r5, r3
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	028b      	lsls	r3, r1, #10
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ba8:	4621      	mov	r1, r4
 8004baa:	028a      	lsls	r2, r1, #10
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	61fa      	str	r2, [r7, #28]
 8004bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bbc:	f7fb fb16 	bl	80001ec <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004bd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be2:	e002      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3750      	adds	r7, #80	@ 0x50
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	@ (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000018 	.word	0x20000018

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a9b      	lsrs	r3, r3, #10
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	@ (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	080062e4 	.word	0x080062e4

08004c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07b      	b.n	8004d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d108      	bne.n	8004c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c66:	d009      	beq.n	8004c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61da      	str	r2, [r3, #28]
 8004c6e:	e005      	b.n	8004c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fd fd52 	bl	8002740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	ea42 0103 	orr.w	r1, r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	f003 0104 	and.w	r1, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	f003 0210 	and.w	r2, r3, #16
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e01a      	b.n	8004d9e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fd fd25 	bl	80027d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b088      	sub	sp, #32
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_SPI_Transmit+0x22>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e126      	b.n	8005016 <HAL_SPI_Transmit+0x270>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dd0:	f7fd fe26 	bl	8002a20 <HAL_GetTick>
 8004dd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d002      	beq.n	8004dec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
 8004de8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dea:	e10b      	b.n	8005004 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_Transmit+0x52>
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d102      	bne.n	8004dfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dfc:	e102      	b.n	8005004 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2203      	movs	r2, #3
 8004e02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	88fa      	ldrh	r2, [r7, #6]
 8004e16:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e44:	d10f      	bne.n	8004e66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e70:	2b40      	cmp	r3, #64	@ 0x40
 8004e72:	d007      	beq.n	8004e84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8c:	d14b      	bne.n	8004f26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_SPI_Transmit+0xf6>
 8004e96:	8afb      	ldrh	r3, [r7, #22]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d13e      	bne.n	8004f1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	881a      	ldrh	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	1c9a      	adds	r2, r3, #2
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ec0:	e02b      	b.n	8004f1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d112      	bne.n	8004ef6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	881a      	ldrh	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee0:	1c9a      	adds	r2, r3, #2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ef4:	e011      	b.n	8004f1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef6:	f7fd fd93 	bl	8002a20 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d803      	bhi.n	8004f0e <HAL_SPI_Transmit+0x168>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d102      	bne.n	8004f14 <HAL_SPI_Transmit+0x16e>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f18:	e074      	b.n	8005004 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ce      	bne.n	8004ec2 <HAL_SPI_Transmit+0x11c>
 8004f24:	e04c      	b.n	8004fc0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_SPI_Transmit+0x18e>
 8004f2e:	8afb      	ldrh	r3, [r7, #22]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d140      	bne.n	8004fb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f5a:	e02c      	b.n	8004fb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d113      	bne.n	8004f92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	7812      	ldrb	r2, [r2, #0]
 8004f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f90:	e011      	b.n	8004fb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f92:	f7fd fd45 	bl	8002a20 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d803      	bhi.n	8004faa <HAL_SPI_Transmit+0x204>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d102      	bne.n	8004fb0 <HAL_SPI_Transmit+0x20a>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fb4:	e026      	b.n	8005004 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1cd      	bne.n	8004f5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f8b3 	bl	8005130 <SPI_EndRxTxTransaction>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e000      	b.n	8005004 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005002:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005014:	7ffb      	ldrb	r3, [r7, #31]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005030:	f7fd fcf6 	bl	8002a20 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	4413      	add	r3, r2
 800503e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005040:	f7fd fcee 	bl	8002a20 <HAL_GetTick>
 8005044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005046:	4b39      	ldr	r3, [pc, #228]	@ (800512c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	015b      	lsls	r3, r3, #5
 800504c:	0d1b      	lsrs	r3, r3, #20
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005056:	e054      	b.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d050      	beq.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005060:	f7fd fcde 	bl	8002a20 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	429a      	cmp	r2, r3
 800506e:	d902      	bls.n	8005076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d13d      	bne.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800508e:	d111      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005098:	d004      	beq.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a2:	d107      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050bc:	d10f      	bne.n	80050de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e017      	b.n	8005122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3b01      	subs	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	429a      	cmp	r2, r3
 800511e:	d19b      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000018 	.word	0x20000018

08005130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800513c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <SPI_EndRxTxTransaction+0x7c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1b      	ldr	r2, [pc, #108]	@ (80051b0 <SPI_EndRxTxTransaction+0x80>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0d5b      	lsrs	r3, r3, #21
 8005148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800515a:	d112      	bne.n	8005182 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	@ 0x80
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff ff5a 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e00f      	b.n	80051a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3b01      	subs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b80      	cmp	r3, #128	@ 0x80
 800519a:	d0f2      	beq.n	8005182 <SPI_EndRxTxTransaction+0x52>
 800519c:	e000      	b.n	80051a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800519e:	bf00      	nop
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000018 	.word	0x20000018
 80051b0:	165e9f81 	.word	0x165e9f81

080051b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e041      	b.n	800524a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fd fb16 	bl	800280c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f000 fa96 	bl	8005724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e04e      	b.n	800530a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a23      	ldr	r2, [pc, #140]	@ (8005318 <HAL_TIM_Base_Start_IT+0xc4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d022      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d01d      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	@ (800531c <HAL_TIM_Base_Start_IT+0xc8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d018      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <HAL_TIM_Base_Start_IT+0xcc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <HAL_TIM_Base_Start_IT+0xd0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00e      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <HAL_TIM_Base_Start_IT+0xd4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d009      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	@ (800532c <HAL_TIM_Base_Start_IT+0xd8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a18      	ldr	r2, [pc, #96]	@ (8005330 <HAL_TIM_Base_Start_IT+0xdc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d111      	bne.n	80052f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b06      	cmp	r3, #6
 80052e4:	d010      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	e007      	b.n	8005308 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40010400 	.word	0x40010400
 800532c:	40014000 	.word	0x40014000
 8005330:	40001800 	.word	0x40001800

08005334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0202 	mvn.w	r2, #2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9b5 	bl	80056e6 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9a7 	bl	80056d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9b8 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0204 	mvn.w	r2, #4
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f98b 	bl	80056e6 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f97d 	bl	80056d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f98e 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0208 	mvn.w	r2, #8
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f961 	bl	80056e6 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f953 	bl	80056d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f964 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0210 	mvn.w	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2208      	movs	r2, #8
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f937 	bl	80056e6 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f929 	bl	80056d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f93a 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fc fa56 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c2:	2b80      	cmp	r3, #128	@ 0x80
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d0:	2b80      	cmp	r3, #128	@ 0x80
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fae0 	bl	8005aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ee:	2b40      	cmp	r3, #64	@ 0x40
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fc:	2b40      	cmp	r3, #64	@ 0x40
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8ff 	bl	800570e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d10e      	bne.n	800553c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b20      	cmp	r3, #32
 800552a:	d107      	bne.n	800553c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0220 	mvn.w	r2, #32
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 faaa 	bl	8005a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_TIM_ConfigClockSource+0x1c>
 800555c:	2302      	movs	r3, #2
 800555e:	e0b4      	b.n	80056ca <HAL_TIM_ConfigClockSource+0x186>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800557e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005598:	d03e      	beq.n	8005618 <HAL_TIM_ConfigClockSource+0xd4>
 800559a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800559e:	f200 8087 	bhi.w	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a6:	f000 8086 	beq.w	80056b6 <HAL_TIM_ConfigClockSource+0x172>
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ae:	d87f      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b70      	cmp	r3, #112	@ 0x70
 80055b2:	d01a      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0xa6>
 80055b4:	2b70      	cmp	r3, #112	@ 0x70
 80055b6:	d87b      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b60      	cmp	r3, #96	@ 0x60
 80055ba:	d050      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x11a>
 80055bc:	2b60      	cmp	r3, #96	@ 0x60
 80055be:	d877      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b50      	cmp	r3, #80	@ 0x50
 80055c2:	d03c      	beq.n	800563e <HAL_TIM_ConfigClockSource+0xfa>
 80055c4:	2b50      	cmp	r3, #80	@ 0x50
 80055c6:	d873      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b40      	cmp	r3, #64	@ 0x40
 80055ca:	d058      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x13a>
 80055cc:	2b40      	cmp	r3, #64	@ 0x40
 80055ce:	d86f      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b30      	cmp	r3, #48	@ 0x30
 80055d2:	d064      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055d4:	2b30      	cmp	r3, #48	@ 0x30
 80055d6:	d86b      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d060      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d867      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d05c      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d05a      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055e8:	e062      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6899      	ldr	r1, [r3, #8]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f000 f9ad 	bl	8005958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800560c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	609a      	str	r2, [r3, #8]
      break;
 8005616:	e04f      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6899      	ldr	r1, [r3, #8]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f000 f996 	bl	8005958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800563a:	609a      	str	r2, [r3, #8]
      break;
 800563c:	e03c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	461a      	mov	r2, r3
 800564c:	f000 f90a 	bl	8005864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2150      	movs	r1, #80	@ 0x50
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f963 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 800565c:	e02c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	461a      	mov	r2, r3
 800566c:	f000 f929 	bl	80058c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2160      	movs	r1, #96	@ 0x60
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f953 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 800567c:	e01c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	461a      	mov	r2, r3
 800568c:	f000 f8ea 	bl	8005864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2140      	movs	r1, #64	@ 0x40
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f943 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 800569c:	e00c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	4610      	mov	r0, r2
 80056aa:	f000 f93a 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 80056ae:	e003      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      break;
 80056b4:	e000      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a40      	ldr	r2, [pc, #256]	@ (8005838 <TIM_Base_SetConfig+0x114>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d013      	beq.n	8005764 <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005742:	d00f      	beq.n	8005764 <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3d      	ldr	r2, [pc, #244]	@ (800583c <TIM_Base_SetConfig+0x118>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00b      	beq.n	8005764 <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3c      	ldr	r2, [pc, #240]	@ (8005840 <TIM_Base_SetConfig+0x11c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3b      	ldr	r2, [pc, #236]	@ (8005844 <TIM_Base_SetConfig+0x120>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3a      	ldr	r2, [pc, #232]	@ (8005848 <TIM_Base_SetConfig+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d108      	bne.n	8005776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2f      	ldr	r2, [pc, #188]	@ (8005838 <TIM_Base_SetConfig+0x114>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d02b      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005784:	d027      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2c      	ldr	r2, [pc, #176]	@ (800583c <TIM_Base_SetConfig+0x118>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d023      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2b      	ldr	r2, [pc, #172]	@ (8005840 <TIM_Base_SetConfig+0x11c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01f      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2a      	ldr	r2, [pc, #168]	@ (8005844 <TIM_Base_SetConfig+0x120>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01b      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a29      	ldr	r2, [pc, #164]	@ (8005848 <TIM_Base_SetConfig+0x124>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d017      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a28      	ldr	r2, [pc, #160]	@ (800584c <TIM_Base_SetConfig+0x128>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a27      	ldr	r2, [pc, #156]	@ (8005850 <TIM_Base_SetConfig+0x12c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00f      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a26      	ldr	r2, [pc, #152]	@ (8005854 <TIM_Base_SetConfig+0x130>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a25      	ldr	r2, [pc, #148]	@ (8005858 <TIM_Base_SetConfig+0x134>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d007      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a24      	ldr	r2, [pc, #144]	@ (800585c <TIM_Base_SetConfig+0x138>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d003      	beq.n	80057d6 <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a23      	ldr	r2, [pc, #140]	@ (8005860 <TIM_Base_SetConfig+0x13c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d108      	bne.n	80057e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0a      	ldr	r2, [pc, #40]	@ (8005838 <TIM_Base_SetConfig+0x114>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_Base_SetConfig+0xf8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a0c      	ldr	r2, [pc, #48]	@ (8005848 <TIM_Base_SetConfig+0x124>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d103      	bne.n	8005824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	615a      	str	r2, [r3, #20]
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40010000 	.word	0x40010000
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40010400 	.word	0x40010400
 800584c:	40014000 	.word	0x40014000
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800
 8005858:	40001800 	.word	0x40001800
 800585c:	40001c00 	.word	0x40001c00
 8005860:	40002000 	.word	0x40002000

08005864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800588e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 030a 	bic.w	r3, r3, #10
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	621a      	str	r2, [r3, #32]
}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b087      	sub	sp, #28
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f023 0210 	bic.w	r2, r3, #16
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	031b      	lsls	r3, r3, #12
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	f043 0307 	orr.w	r3, r3, #7
 8005944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	021a      	lsls	r2, r3, #8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	431a      	orrs	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4313      	orrs	r3, r2
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	609a      	str	r2, [r3, #8]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e05a      	b.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a21      	ldr	r2, [pc, #132]	@ (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059fc:	d01d      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1a      	ldr	r2, [pc, #104]	@ (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a17      	ldr	r2, [pc, #92]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10c      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40010400 	.word	0x40010400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40001800 	.word	0x40001800

08005a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <memset>:
 8005ab8:	4402      	add	r2, r0
 8005aba:	4603      	mov	r3, r0
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d100      	bne.n	8005ac2 <memset+0xa>
 8005ac0:	4770      	bx	lr
 8005ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac6:	e7f9      	b.n	8005abc <memset+0x4>

08005ac8 <__libc_init_array>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4d0d      	ldr	r5, [pc, #52]	@ (8005b00 <__libc_init_array+0x38>)
 8005acc:	4c0d      	ldr	r4, [pc, #52]	@ (8005b04 <__libc_init_array+0x3c>)
 8005ace:	1b64      	subs	r4, r4, r5
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	42a6      	cmp	r6, r4
 8005ad6:	d109      	bne.n	8005aec <__libc_init_array+0x24>
 8005ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8005b08 <__libc_init_array+0x40>)
 8005ada:	4c0c      	ldr	r4, [pc, #48]	@ (8005b0c <__libc_init_array+0x44>)
 8005adc:	f000 f826 	bl	8005b2c <_init>
 8005ae0:	1b64      	subs	r4, r4, r5
 8005ae2:	10a4      	asrs	r4, r4, #2
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	d105      	bne.n	8005af6 <__libc_init_array+0x2e>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af0:	4798      	blx	r3
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7ee      	b.n	8005ad4 <__libc_init_array+0xc>
 8005af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afa:	4798      	blx	r3
 8005afc:	3601      	adds	r6, #1
 8005afe:	e7f2      	b.n	8005ae6 <__libc_init_array+0x1e>
 8005b00:	080062f4 	.word	0x080062f4
 8005b04:	080062f4 	.word	0x080062f4
 8005b08:	080062f4 	.word	0x080062f4
 8005b0c:	080062f8 	.word	0x080062f8

08005b10 <memcpy>:
 8005b10:	440a      	add	r2, r1
 8005b12:	4291      	cmp	r1, r2
 8005b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b18:	d100      	bne.n	8005b1c <memcpy+0xc>
 8005b1a:	4770      	bx	lr
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b26:	4291      	cmp	r1, r2
 8005b28:	d1f9      	bne.n	8005b1e <memcpy+0xe>
 8005b2a:	bd10      	pop	{r4, pc}

08005b2c <_init>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr

08005b38 <_fini>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	bf00      	nop
 8005b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3e:	bc08      	pop	{r3}
 8005b40:	469e      	mov	lr, r3
 8005b42:	4770      	bx	lr
